/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//\n// // class DateSerializer {\n// //   static serializeDate(date): any {\n// //     return {\n// //       year: date.getFullYear(),\n// //       month: date.getMonth() + 1,\n// //       day: date.getDate(),\n// //       formatted: date.toLocaleDateString()\n// //     };\n// //   }\n// //   static deserializeDate(dateObj): Date {\n// //     return new Date(dateObj.formatted);\n// //   }\n// // }\n// //\n// // // @JsonRootName()\n// // // @JsonIgnoreType()\n// // @JsonTypeInfo({use: JsonTypeInfoId.NAME, include: JsonTypeInfoAs.PROPERTY, property: 'example2_type'})\n// // class Example2 {\n// //\n// //   name = '';\n// //   age = 55;\n// //\n// //   @JsonSerialize({using: DateSerializer.serializeDate})\n// //   @JsonDeserialize({using: DateSerializer.deserializeDate})\n// //   date = new Date();\n// //\n// //   // @JsonBackReference({class: () => Example3})\n// //   example;\n// //\n// //   constructor(name, age, date, example) {\n// //     this.name = name;\n// //     this.age = age;\n// //     this.date = date;\n// //     this.example = example;\n// //   }\n// //\n// //   @JsonCreator()\n// //   static creator(name, age, date) {\n// //     return new Example2(name, age, date, null);\n// //   }\n// //   // @JsonValue()\n// //   getValue() {\n// //     return 'ciao ' + this.name;\n// //   }\n// //\n// // }\n//\n// // @JsonCreator()\n// // @JsonIgnoreType()\n// // @JsonRootName()\n// @JsonPropertyOrder({value: ['example2', 'test2', 'name']})\n// // @JsonInclude({value: JsonInclude.Include.NON_EMPTY})\n// // @JsonIgnoreProperties({\n// //   value: [\"age\", \"username\"],\n// //   allowGetters: true\n// // })\n// @JsonTypeInfo({use: JsonTypeInfoId.NAME, include: JsonTypeInfoAs.PROPERTY})\n// @JsonSubTypes({types: [\n//   {class: () => Example3, name: 'custom_type_name'}\n// ]})\n// class Example {\n//   // @JsonIgnore()\n//   @JsonProperty({value: 'username'})\n//   name = 'pippo';\n//\n//   // @JsonInclude({value: JsonInclude.Include.NON_NULL})\n//   age = 5;\n//\n//   mTest = false;\n//   test2 = false;\n//\n//   @JsonRawValue()\n//   @JsonProperty({value: 'property_test'})\n//   testValue = '{\"asd\": 5}';\n//\n//   // @JsonManagedReference({class: () => Example2})\n//   example2References;\n//\n//   constructor(name, age, tttest, example2References) {\n//     this.name = name;\n//     this.age = age;\n//     this.mTest = tttest;\n//     this.test2 = !tttest;\n//     this.example2References = example2References;\n//   }\n//\n//   @JsonCreator()\n//   static creator(name2, age, teeeest/* , example2_references*/) {\n//     return new Example(name2, age, teeeest, null/* , example2_references*/);\n//   }\n//\n//   // @JsonAnyGetter({enabled: false})\n//   testAnyGetter() {\n//     return {\n//       age: this.age,\n//     };\n//   }\n//\n// }\n//\n// // @JsonRootName()\n// @JsonCreator()\n// // @JsonTypeName({value: \"example3\"})\n// class Example3 extends Example {\n//   newProperty = 344443434;\n// }\n// //\n// // const test = new Example2('test 1', 20, new Date(), null);\n// // const test2 = new Example2('test 2', 40, new Date(), null);\n// // // let a = new Example(\"my name\", 45, '');\n// // const a = new Example3('my name', null, '', null);\n// // // a.example2References = [test, test2];\n// // a.example2References = test;\n// // // let a = new Example(\"my name\", 45, false);\n// // // test.example = a;\n// // // test2.example = a;\n// // a.testValue = '{\"test\": 100}';\n//\n// // let stringified1 = stringify(test, null, \"\\t\");\n// // console.log(stringified1)\n// // console.log(parse(stringified1, null, { mainCreator: Example2, otherCreators: [Example] }));\n//\n// // let stringified2 = stringify(a, null, \"\\t\");\n// // console.log(stringified2)\n// // //console.log(parse(stringified2, null, { mainCreator: Example, otherCreators: [Example2] }));\n// // console.log(parse(stringified2, null, { mainCreator: Example3, otherCreators: [Example2] }));\n//\n//\n//\n//\n// @JsonTypeInfo({use: JsonTypeInfoId.NAME, include: JsonTypeInfoAs.PROPERTY})\n// @JsonSubTypes({types:\n//   [\n//     {class: () => Rectangle},\n//     {class: () => Circle}\n//   ]\n// })\n// class Shape {\n//\n// }\n//\n// @JsonTypeName({value: 'rectangle'})\n// class Rectangle extends Shape {\n//   w;\n//   h;\n//   constructor(w, h) {\n//     super();\n//     this.w = w;\n//     this.h = h;\n//   }\n// }\n//\n// @JsonTypeName({value: 'circle'})\n// class Circle extends Shape {\n//   radius;\n//   constructor(radius) {\n//     super();\n//     this.radius = radius;\n//   }\n// }\n//\n// class View {\n//\n//   @JsonFormat({\n//     shape: JsonFormatShape.OBJECT\n//   })\n//   @JsonDeserialize({using: (shapes) => Object.values(shapes)})\n//   // @JsonManagedReference({class: () => Shape})\n//   shapes = [];\n//   constructor(shapes) {\n//     this.shapes = shapes;\n//   }\n// }\n//\n// // let view = new View([]);\n// // view.shapes = [new Rectangle(10,20), new Circle(5)];\n// // let stringified4 = stringify(view, null, \"\\t\");\n// // console.log(stringified4)\n// // console.log(parse(stringified4, null, { mainCreator: View, otherCreators: [Circle, Rectangle, Shape] }));\n//\n// class Event {\n//   name;\n//\n//   @JsonFormat({\n//     shape: JsonFormatShape.STRING,\n//     locale: 'es',\n//     pattern: 'dddd YYYY-MM-DDTHH:mm:ssZ[Z]',\n//     timezone: 'America/New_York'\n//   })\n//   @JsonDeserialize({using: (date) => dayjs(date, 'dddd YYYY-MM-DDTHH:mm:ssZ[Z]').toDate()})\n//   eventDate;\n// }\n//\n// // let event = new Event();\n// // event.name = \"Event 1\";\n// // event.eventDate = new Date();\n// // let stringified5 = stringify(event, null, \"\\t\");\n// // console.log(stringified5)\n// // console.log(parse(stringified5, null, { mainCreator: Event }));\n// /*\n// class User {\n//   id;\n//   name;\n//\n//   // @JsonManagedReference({class: () => Item2})\n//   userItems2 = [];\n//   // @JsonManagedReference({class: () => Item3})\n//   userItems3 = [];\n//\n//   constructor(id, name) {\n//     this.id = id;\n//     this.name = name;\n//   }\n//\n//   @JsonCreator()\n//   static creator(@JsonProperty({value: 'username'}) name, @JsonProperty({value: 'userId'}) id) {\n//     const user = new User(id, name);\n//     return user;\n//   }\n//\n//   addItem2(item) {\n//     this.userItems2.push(item);\n//   }\n//\n//   addItem3(item) {\n//     this.userItems3.push(item);\n//   }\n//\n// }*/\n// class Item2 {\n//   id;\n//   itemName;\n//\n//   // @JsonBackReference({class: () => User})\n//   owner;\n//\n//   // @JsonBackReference({class: () => Item3, value: \"item3\"})\n//   item3;\n//\n//   constructor(id, itemName, owner) {\n//     this.id = id;\n//     this.itemName = itemName;\n//     this.owner = owner;\n//   }\n// }\n// class Item3 {\n//   id;\n//   itemName;\n//\n//   // @JsonBackReference({class: () => User})\n//   owner;\n//   // @JsonBackReference({class: () => User, value: \"owner2\"})\n//   owner2;\n//\n//   // @JsonManagedReference({class: () => Item2, value: \"item3\"})\n//   item2;\n//\n//   constructor(id, itemName, owner) {\n//     this.id = id;\n//     this.itemName = itemName;\n//     this.owner = owner;\n//   }\n// }\n//\n// // const user = new User(1, \"John 1\");\n// // const user2 = new User(2, \"John 2\");\n// // const item2 = new Item2(2, \"book 1\", user);\n// // const item3 = new Item3(3, \"book 2\", user);\n// // //item3.owner2 = user2;\n// // item3.item2 = item2;\n// // //item2.item3 = item3;\n// // user.addItem2(item2);\n// // user.addItem3(item3);\n// // user2.addItem3(item3);\n// // let stringified7 = stringify(user, null, \"\\t\");\n// // console.log(stringified7)\n// // console.log(parse(\n// //   `{\n// //   \"userId\": 1,\n// //   \"username\": \"John 1\"\n// // }\n// // `, null, { mainCreator: User});\n// // console.log(parse(stringified7, null, { mainCreator: User, otherCreators: [Item3, Item2] }));\n//\n// class TestJsonProperty {\n//   @JsonAlias({values: ['username']})\n//   name: string;\n// }\n//\n// // const testJsonProperty = new TestJsonProperty();\n// // testJsonProperty.name = 'test';\n// // console.log(stringify(testJsonProperty, null, '\\t'));\n// // console.log(parse(`\n// // {\n// //         \"username\": \"test\"\n// // }\n// // `, null, {mainCreator: TestJsonProperty}));\n// //\n// // class TestJsonClassUser {\n// //   @JsonProperty({value: 'userId'})\n// //   id: number;\n// //   email: string;\n// //   @JsonSerialize({using: DateSerializer.serializeDate})\n// //   @JsonDeserialize({using: DateSerializer.deserializeDate})\n// //   date = new Date();\n// //\n// //   constructor(id, email) {\n// //     this.id = id;\n// //     this.email = email;\n// //   }\n// //\n// //   @JsonCreator()\n// //   static creator(email, @JsonProperty({value: 'userId'}) id) {\n// //     return new TestJsonClassUser(id, email);\n// //   }\n// // }\n// /*\n// class TestJsonClass {\n//   @JsonClass({class: () => TestJsonClassUser})\n//   user: TestJsonClassUser;\n// }\n//\n// // const objectMapper = new ObjectMapper();\n// //\n// // const tUser = new TestJsonClassUser(1, \"john.alfa@gmail.com\");\n// // const testJsonClass = new TestJsonClass();\n// // testJsonClass.user = tUser;\n// // const stringified8 = `\n// // {\n// //         \"user\": {\n// //                 \"userId\": 1,\n// //                 \"email\": \"john.alfa@gmail.com\",\n// //                 \"date\": {\n// //                         \"year\": 2020,\n// //                         \"month\": 3,\n// //                         \"day\": 11,\n// //                         \"formatted\": \"3/11/2020\"\n// //                 }\n// //         },\n// //         \"unknown\": true\n// // }\n// //\n// // `;\n// //\n// // objectMapper.features.serialization[SerializationFeature.FAIL_ON_SELF_REFERENCES] = true;\n// // objectMapper.features.deserialization[DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES] = true;\n// //\n// // const serializer1: ObjectMapperSerializer = {\n// //   mapper: (key, value) => {\n// //     value['asd'] = 4;\n// //     return value;\n// //   },\n// //   order: 1,\n// //   type: TestJsonClassUser\n// // };\n// //\n// // objectMapper.serializers.push(serializer1);\n// //\n// // console.log(\n// //   objectMapper.stringify<TestJsonClass>(testJsonClass, {format: '\\t'})\n// // );\n// //\n// // const deserializer1: ObjectMapperDeserializer = {\n// //   mapper: (key, value) => {\n// //     if (key === 'user') {\n// //       const user = new TestJsonClassUser(value.userId + 3, value.email + \"lol\");\n// //       user.date = value.date;\n// //       return user;\n// //     }\n// //     return value;\n// //   },\n// //   order: 1\n// // };\n// // objectMapper.deserializers.push(deserializer1);\n// //\n// // console.log(objectMapper.parse<TestJsonClass, TestJsonClass>(stringified8,{mainCreator: TestJsonClass}));\n//\n// class SpecialItem {\n//   id;\n//\n//   @JsonView({value: [() => Views.special]})\n//   ownerName;\n//\n//   constructor(id, ownerName) {\n//     this.id = id;\n//     this.ownerName = ownerName;\n//   }\n// }\n//\n// class Item {\n//\n//   @JsonView({value: [() => Views.internal, () => Views.public]})\n//   id;\n//\n//   @JsonView({value: [() => Views.public]})\n//   itemName;\n//\n//   @JsonClass({class: () => Item})\n//   relatedItem : Item;\n//\n//   constructor(id, itemName) {\n//     this.id = id;\n//     this.itemName = itemName;\n//   }\n// }\n// class Public {}\n// class Internal {}\n// class Special {}\n// class Views {\n//   static public = Public;\n//   static internal = Internal;\n//   static special = Special;\n// }\n// // const objectMapper = new ObjectMapper();\n// //\n// // objectMapper.features.serialization[SerializationFeature.FAIL_ON_SELF_REFERENCES] = true;\n// // objectMapper.features.deserialization[DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES] = true;\n// //\n// // let specialItem = new SpecialItem(1, 'John');\n// // let item = new Item(2, \"book\");\n// // item.relatedItem = item;\n// // let stringified6 = objectMapper.stringify<Item>(item, { format: '\\t' });\n// // console.log(stringified6)\n// // console.log(objectMapper.parse<Item, Item>(stringified6, { mainCreator: () => Item }));\n//\n// class Parent {\n//\n//   @JsonClass({class: () => Name})\n//   //@JsonUnwrapped({prefix: 'parent-'})\n//   name: Name;\n//\n//   age: number;\n// }\n// @JsonTypeInfo({use: JsonTypeInfoId.NAME, include: JsonTypeInfoAs.WRAPPER_ARRAY})\n// class Name {\n//   last: string;\n//   first: string;\n// }\n//\n// // const objectMapper = new ObjectMapper();\n// // objectMapper.features.serialization[SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS] = true;\n// // const parent = new Parent();\n// // parent.age = 35;\n// // parent.name = new Name();\n// // parent.name.first = \"John\";\n// // parent.name.last = \"Alfa\";\n// // let stringified9 = objectMapper.stringify<Parent>(parent, { format: '\\t' });\n// // console.log(stringified9);\n// // console.log(objectMapper.parse<Parent, Parent>(stringified9, {mainCreator: Parent}));\n//\n// @JsonIdentityInfo({generator: ObjectIdGenerator.PropertyGenerator, property: 'id', scope: \"Scope - A\"})\n// class A {\n//   id: number;\n//   name: string;\n//\n//   @JsonClass({class: () => B, isIterable: true})\n//   b: B[] = [];\n//\n//   constructor(id: number, name: string) {\n//     this.id = id;\n//     this.name = name;\n//   }\n//\n// }\n//\n// //@JsonTypeInfo({use: JsonTypeInfoId.NAME, include: JsonTypeInfoAs.WRAPPER_ARRAY})\n// @JsonIdentityInfo({generator: ObjectIdGenerator.PropertyGenerator, property: 'id', scope: \"Scope - B\"})\n// class B {\n//   id: number;\n//   name: string;\n//\n//   @JsonClass({class: () => C})\n//   c: C;\n//\n//   constructor(id: number, name: string, c: C) {\n//     this.id = id;\n//     this.name = name;\n//     this.c = c;\n//   }\n// }\n//\n// @JsonIdentityInfo({generator: ObjectIdGenerator.PropertyGenerator, property: 'id', scope: \"Scope - C\"})\n// class C {\n//   id: number;\n//   name: string;\n//\n//   @JsonClass({class: () => A})\n//   a: A;\n//\n//   constructor(id: number, name: string, a: A) {\n//     this.id = id;\n//     this.name = name;\n//     this.a = a;\n//   }\n// }\n// */\n// // const testA = new A(1, 'Element A');\n// // const testC = new C(1, 'Element C1', testA);\n// // const testB = new B(1, 'Element B1', testC);\n// // const testB2 = new B(2, 'Element B2', testC);\n// // testA.b.push(testB);\n// // testA.b.push(testB2);\n// // const objectMapper = new ObjectMapper();\n// // let stringified10 = objectMapper.stringify<A>(testA, { format: '\\t' });\n// // console.log(stringified10);\n// // //objectMapper.features.deserialization[DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES] = false;\n// // const resultA = objectMapper.parse<A, A>(stringified10, {mainCreator: () => A});\n// // console.log(resultA)\n// // console.log(resultA.b[0].c === resultA.b[1].c)\n//\n// const set = new Set<Array<any>>();\n// set.add([1, 2]);\n// set.add([2]);\n// set.add([3]);\n// // const objectMapper = new ObjectMapper();\n// // let stringified11 = objectMapper.stringify<Set<Array<any>>>(set, { format: '\\t' });\n// // console.log(stringified11);\n// // console.log(objectMapper.parse<Set<Array<any>>>(stringified11, {mainCreator: () => [Set, [Array]]}));\n//\n// // const user = new User(1, 'asd');\n// //\n// // const map = new Map<User, Set<Array<any>>>();\n// // map.set(user, set);\n// // const objectMapper = new ObjectMapper();\n// // let stringified12 = objectMapper.stringify<Map<User, Set<Array<any>>>>(map, { format: '\\t' });\n// // console.log(stringified12);\n// // console.log(objectMapper.parse<Map<User, Set<Array<any>>>>(stringified12, {mainCreator: () => [Map, [User, Set]]}));\n//\n// // class Parent2 {\n// //   name: string;\n// //\n// //   @JsonClass({class: () => [Array, [Child2]]})\n// //   @JsonManagedReference()\n// //   child: Array<Child2>;\n// //\n// //   constructor(name: string) {\n// //     this.name = name;\n// //   }\n// // }\n// //\n// // class Child2 {\n// //   name: string;\n// //\n// //   @JsonClass({class: () => [Parent2]})\n// //   @JsonBackReference()\n// //   parent: Parent2;\n// //\n// //   constructor(name: string) {\n// //     this.name = name;\n// //   }\n// // }\n// // const objectMapper = new ObjectMapper();\n// // const child1 = new Child2('John');\n// // const child2 = new Child2('Samanta');\n// // const parent1 = new Parent2('Dario');\n// // // const parent2 = new Parent2('Nadia');\n// // parent1.child.push(...[child1, child2]);\n// //\n// // const stringified13 = objectMapper.stringify<Parent2>(parent1, { format: '\\t' });\n// // console.log(stringified13);\n// // console.log(objectMapper.parse<Parent2>(stringified13, {mainCreator: () => [Parent2]}));\n//\n// // const objectMapper = new ObjectMapper();\n// // const arr = new Uint8Array([21, 31]);\n// // const stringified14 = objectMapper.stringify(arr);\n// // console.log(stringified14);\n// // console.log(objectMapper.parse<Uint8Array>(stringified14, {mainCreator: () => [Uint8Array]}));\n//\n//\n// // if (BigInt) {\n// //   const objectMapper = new ObjectMapper();\n// //   // @ts-ignore\n// //   const arr = [45n, 54n];\n// //   const stringified14 = objectMapper.stringify(arr, {format: '\\t'});\n// //   console.log(stringified14);\n// //   //console.log(objectMapper.parse<Array<bigint>>(stringified14, {mainCreator: () => [Array, [BigInt]]}));\n// // }\n//\n// // const objectMapper = new ObjectMapper();\n// // const re = new RegExp('ab+c');\n// // const stringified15 = objectMapper.stringify(re);\n// // console.log(stringified15);\n// // console.log(objectMapper.parse<RegExp>(stringified15, {mainCreator: () => [RegExp]}));\n// //\n// // const objectMapper = new ObjectMapper();\n// // const date = new Date();\n// // const stringified16 = objectMapper.stringify(date);\n// // console.log(stringified16);\n// // console.log(objectMapper.parse<Date>(stringified16, {mainCreator: () => [Date]}));\n//\n// //\n// // class Views {\n// //   static public = class Public {};\n// //   static internal = class Internal {};\n// // }\n// //\n// // class User {\n// //   id: number;\n// //   email: string;\n// //   @JsonView({value: () => [Views.internal]})\n// //   password: string;\n// //   @JsonClass({class: () => [Array, [Item]]})\n// //   items: Item[] = [];\n// // }\n// //\n// // class Item {\n// //   @JsonView({value: () => [Views.internal]})\n// //   id: number;\n// //   @JsonView({value: () => [Views.public]})\n// //   name: string;\n// // }\n// //\n// // const item1 = new Item();\n// // item1.id = 1;\n// // item1.name = 'Item 1';\n// // const item2 = new Item();\n// // item2.id = 2;\n// // item2.name = 'Item 2';\n// // const user = new User();\n// // user.id = NaN;\n// // user.email = 'john.alfa@gmail.com';\n// // user.password = '43jn53rsad';\n// // user.items = [item1, item2];\n// // const objectMapper = new ObjectMapper();\n// //\n// // const forType = new WeakMap<ClassType<any>, JsonStringifierOptions>();\n// // const forTypeUser = new WeakMap<ClassType<any>, JsonStringifierOptions>();\n// //\n// // forType.set(User, {\n// //   withView: () => Views.internal,\n// //   forType: forTypeUser\n// // });\n// // forTypeUser.set(Item, {\n// //   withView: () => Views.public\n// // });\n// // /*\n// // forType.set(Item, {\n// //   withView: () => Views.internal\n// // });\n// // */\n// // const jsonData = objectMapper.stringify(user, {\n// //   // withView: () => Views.internal,\n// //   features: {\n// //     [SerializationFeature.WRITE_NAN_AS_ZERO]: true\n// //   },\n// //   // forType\n// // });\n// // // const userParsed = objectMapper.parse(jsonData, {\n// // //   mainCreator: () => [User],\n// // //   withView: () => Views.public,\n// // //   forType\n// // // });\n// // // console.log(userParsed);\n// //\n//\n// @JsonFormat({shape: JsonFormatShape.OBJECT})\n// class ArrayEx<T> extends Array<T> {\n//   @JsonIgnore()\n//   wrapper: number[] = [];\n//\n//   constructor(...args) {\n//     super();\n//     this.wrapper = [...args];\n//\n//     // this line is required for ES5!\n//     this.constructor = ArrayEx;\n//   }\n// }\n// class User {\n//   id: number;\n//   numbers: ArrayEx<number>;\n// }\n//\n// const user = new User();\n// user.id = 1;\n// user.numbers = new ArrayEx(1, 3, 5);\n// const objectMapper = new ObjectMapper();\n//\n// const jsonData = objectMapper.stringify(user, {\n//   annotationsEnabled: {\n//     JsonFormat: true,\n//     JsonIgnore: false\n//   }\n// });\n// console.log(jsonData);\n// console.log(NamingBean.toString());\n// console.log(getArgumentNames(NamingBean));\n// const namingBean = new NamingBean(1, 'Naming Bean');\n// const objectMapper = new ObjectMapper();\n// const jsonData = objectMapper.stringify(namingBean);\n// console.log(jsonData);\n// const namingBeanParsed = objectMapper.parse<NamingBean>(jsonData, {mainCreator: () => [NamingBean]});\n// console.log(namingBeanParsed);\n// class Item {\n//   @JsonClass({class: () => [Number]})\n//   id: number;\n//   @JsonClass({class: () => [String]})\n//   name: string;\n//   @JsonClass({class: () => [Boolean]})\n//   hidden: boolean;\n//\n//   constructor(id, name, hidden) {\n//     this.id = id;\n//     this.name = name;\n//     this.hidden = hidden;\n//   }\n// }\n// const item = new Item(null, null, null);\n// const objectMapper = new ObjectMapper();\n// objectMapper.features.serialization[SerializationFeature.SET_DEFAULT_VALUE_FOR_PRIMITIVES_ON_NULL] = true;\n// console.log(objectMapper.stringify(item));\n// @JsonTypeInfo({\n//   use: JsonTypeInfoId.NAME,\n//   include: JsonTypeInfoAs.WRAPPER_OBJECT\n// })\n// @JsonSubTypes({\n//   types: [\n//     {class: () => Dog, name: 'dog'},\n//     {class: () => Cat, name: 'cat'},\n//   ]\n// })\n// class Animal {\n//   name: string;\n//\n//   constructor(name: string) {\n//     this.name = name;\n//   }\n// }\n//\n// @JsonTypeName({value: 'dog'})\n// class Dog extends Animal {\n//\n// }\n//\n// @JsonTypeName({value: 'cat'})\n// class Cat extends Animal {\n//\n// }\n//\n// const dog = new Dog('Arthur');\n// const cat = new Cat('Merlin');\n//\n// const objectMapper = new ObjectMapper();\n// const jsonData = objectMapper.stringify<Array<any>>([dog, cat]);\n// console.log(jsonData);\n//\n// const animals = objectMapper.parse<Array<Animal>>(jsonData, {mainCreator: () => [Array, [Animal]]});\n// console.log(animals);\n// class User {\n//   @JsonProperty()\n//   id: number;\n//   @JsonProperty()\n//   firstname: string;\n//   @JsonProperty()\n//   lastname: string;\n//   @JsonProperty()\n//   lastUpdated: Date;\n//\n//   constructor(id: number, firstname: string, lastname: string) {\n//     this.id = id;\n//     this.firstname = firstname;\n//     this.lastname = lastname;\n//   }\n//\n//   @JsonSetter({value: 'lastUpdated'})\n//   setLastUpdate(@JsonInject({useInput: false}) lastUpdated: Date) {\n//     this.lastUpdated = lastUpdated;\n//   }\n// }\n//\n// const user = new User(1, 'John', 'Alfa');\n// const objectMapper = new ObjectMapper();\n//\n// const jsonData = objectMapper.stringify<User>(user);\n// console.log(jsonData);\n//\n// const userParsed = objectMapper.parse<User>(jsonData, {\n//   mainCreator: () => [User],\n//   injectableValues: {\n//     lastUpdated: new Date()\n//   }\n// });\n// console.log(userParsed);\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ })

/******/ });