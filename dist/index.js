/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/parser/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@babel/parser/lib/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop === 0 ? 0 : conf.binop || null;\n    this.updateContext = null;\n  }\n\n}\n\nfunction KeywordTokenType(keyword, options = {}) {\n  return new TokenType(keyword, Object.assign({}, options, {\n    keyword\n  }));\n}\n\nfunction BinopTokenType(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: BinopTokenType(\"|>\", 0),\n  nullishCoalescing: BinopTokenType(\"??\", 1),\n  logicalOR: BinopTokenType(\"||\", 1),\n  logicalAND: BinopTokenType(\"&&\", 2),\n  bitwiseOR: BinopTokenType(\"|\", 3),\n  bitwiseXOR: BinopTokenType(\"^\", 4),\n  bitwiseAND: BinopTokenType(\"&\", 5),\n  equality: BinopTokenType(\"==/!=\", 6),\n  relational: BinopTokenType(\"</>\", 7),\n  bitShift: BinopTokenType(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: BinopTokenType(\"%\", 10),\n  star: BinopTokenType(\"*\", 10),\n  slash: BinopTokenType(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  })\n};\n\nfunction makeKeywordProps(name, conf) {\n  return {\n    value: KeywordTokenType(name, conf),\n    enumerable: true\n  };\n}\n\nconst keywords = Object.create(null, {\n  break: makeKeywordProps(\"break\"),\n  case: makeKeywordProps(\"case\", {\n    beforeExpr\n  }),\n  catch: makeKeywordProps(\"catch\"),\n  continue: makeKeywordProps(\"continue\"),\n  debugger: makeKeywordProps(\"debugger\"),\n  default: makeKeywordProps(\"default\", {\n    beforeExpr\n  }),\n  do: makeKeywordProps(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  else: makeKeywordProps(\"else\", {\n    beforeExpr\n  }),\n  finally: makeKeywordProps(\"finally\"),\n  for: makeKeywordProps(\"for\", {\n    isLoop\n  }),\n  function: makeKeywordProps(\"function\", {\n    startsExpr\n  }),\n  if: makeKeywordProps(\"if\"),\n  return: makeKeywordProps(\"return\", {\n    beforeExpr\n  }),\n  switch: makeKeywordProps(\"switch\"),\n  throw: makeKeywordProps(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  try: makeKeywordProps(\"try\"),\n  var: makeKeywordProps(\"var\"),\n  const: makeKeywordProps(\"const\"),\n  while: makeKeywordProps(\"while\", {\n    isLoop\n  }),\n  with: makeKeywordProps(\"with\"),\n  new: makeKeywordProps(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  this: makeKeywordProps(\"this\", {\n    startsExpr\n  }),\n  super: makeKeywordProps(\"super\", {\n    startsExpr\n  }),\n  class: makeKeywordProps(\"class\", {\n    startsExpr\n  }),\n  extends: makeKeywordProps(\"extends\", {\n    beforeExpr\n  }),\n  export: makeKeywordProps(\"export\"),\n  import: makeKeywordProps(\"import\", {\n    startsExpr\n  }),\n  null: makeKeywordProps(\"null\", {\n    startsExpr\n  }),\n  true: makeKeywordProps(\"true\", {\n    startsExpr\n  }),\n  false: makeKeywordProps(\"false\", {\n    startsExpr\n  }),\n  in: makeKeywordProps(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  instanceof: makeKeywordProps(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  typeof: makeKeywordProps(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  void: makeKeywordProps(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  delete: makeKeywordProps(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n});\nObject.keys(keywords).forEach(name => {\n  types[\"_\" + name] = keywords[name];\n});\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = (superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.value;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (isSimpleProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    const prop = method;\n    const paramCount = prop.kind === \"get\" ? 0 : 1;\n    const start = prop.start;\n\n    if (prop.value.params.length !== paramCount) {\n      if (prop.kind === \"get\") {\n        this.raise(start, \"getter must not have any formal parameters\");\n      } else {\n        this.raise(start, \"setter must have exactly one formal parameter\");\n      }\n    }\n\n    if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n      this.raise(start, \"setter function argument must not be a rest parameter\");\n    }\n  }\n\n  checkLVal(expr, isBinding, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"ObjectPattern\":\n        expr.properties.forEach(prop => {\n          this.checkLVal(prop.type === \"Property\" ? prop.value : prop, isBinding, checkClashes, \"object destructuring pattern\");\n        });\n        break;\n\n      default:\n        super.checkLVal(expr, isBinding, checkClashes, contextDescription);\n    }\n  }\n\n  checkPropClash(prop, propHash) {\n    if (prop.computed || !isSimpleProperty(prop)) return;\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      if (propHash.proto) {\n        this.raise(key.start, \"Redefinition of __proto__ property\");\n      }\n\n      propHash.proto = true;\n    }\n  }\n\n  isStrictBody(node) {\n    const isBlockStatement = node.body.type === \"BlockStatement\";\n\n    if (isBlockStatement && node.body.body.length > 0) {\n      for (let _i = 0, _node$body$body = node.body.body; _i < _node$body$body.length; _i++) {\n        const directive = _node$body$body[_i];\n\n        if (directive.type === \"ExpressionStatement\" && directive.expression.type === \"Literal\") {\n          if (directive.expression.value === \"use strict\") return true;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && (!stmt.expression.extra || !stmt.expression.extra.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    directive.value.value = value;\n    return directive;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, \"MethodDefinition\");\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refShorthandDefaultPos) {\n    switch (this.state.type) {\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refShorthandDefaultPos);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    super.parseFunctionBody(node, allowExpression);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, type) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, \"FunctionExpression\");\n    delete funcNode.kind;\n    node.value = funcNode;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isBinding, contextDescription) {\n    if (isSimpleProperty(node)) {\n      this.toAssignable(node.value, isBinding, contextDescription);\n      return node;\n    }\n\n    return super.toAssignable(node, isBinding, contextDescription);\n  }\n\n  toAssignableObjectExpressionProp(prop, isBinding, isLast) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n    } else if (prop.method) {\n      this.raise(prop.key.start, \"Object pattern can't contain methods\");\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isBinding, isLast);\n    }\n  }\n\n});\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed || this.state.value === \"yield\" && this.state.inGenerator) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.state.input.slice(this.state.lastTokEnd, this.state.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\nconst reservedWords = {\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strict.concat(reservedWords.strictBind));\nconst isReservedWord = (word, inModule) => {\n  return inModule && word === \"await\" || word === \"enum\";\n};\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictBindSet.has(word);\n}\nconst keywords$1 = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"while\", \"with\", \"null\", \"true\", \"false\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"new\", \"in\", \"this\", \"const\", \"class\", \"extends\", \"export\", \"import\", \"super\"]);\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\nconst keywordRelationalOperator = /^in(stanceof)?$/;\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7b9\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 190, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 26, 230, 43, 117, 63, 32, 0, 257, 0, 11, 39, 8, 0, 22, 0, 12, 39, 3, 3, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 68, 12, 0, 67, 12, 65, 1, 31, 6129, 15, 754, 9486, 286, 82, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 280, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedTypes = [\"any\", \"bool\", \"boolean\", \"empty\", \"false\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\", \"interface\", \"extends\", \"_\"];\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => class extends superClass {\n  constructor(options, input) {\n    super(options, input);\n    this.flowPragma = undefined;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n      if (!matches) {\n        this.flowPragma = null;\n      } else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    const moduloPos = this.state.start;\n    this.expect(types.modulo);\n    const checksLoc = this.state.startLoc;\n    this.expectContextual(\"checks\");\n\n    if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n      this.raise(moduloPos, \"Spaces between ´%´ and ´checks´ are not allowed here.\");\n    }\n\n    if (this.eat(types.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    this.expect(types.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.finishNode(id, id.type);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.isContextual(\"module\")) {\n      if (this.lookahead().type === types.dot) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.unexpected(null, \"`declare module` cannot be used inside another `declare module`\");\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.next();\n\n    if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types.braceL);\n\n    while (!this.match(types.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types._import)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.value !== \"type\" && lookahead.value !== \"typeof\") {\n          this.unexpected(null, \"Imports within a `declare module` body must always be `import type` or `import typeof`\");\n        }\n\n        this.next();\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", \"Only declares and type imports are allowed inside declare module\");\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.expect(types.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    const errorMessage = \"Found both `declare module.exports` and `declare export` in the same module. \" + \"Modules can only have 1 since they are either an ES module or they are a CommonJS module\";\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.unexpected(bodyElement.start, errorMessage);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.unexpected(bodyElement.start, \"Duplicate `declare module.exports` statement\");\n        }\n\n        if (kind === \"ES\") this.unexpected(bodyElement.start, errorMessage);\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types._export);\n\n    if (this.eat(types._default)) {\n      if (this.match(types._function) || this.match(types._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        this.unexpected(this.state.start, `\\`declare export ${label}\\` is not supported. Use \\`${suggestion}\\` instead`);\n      }\n\n      if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n          node = this.parseExport(node);\n\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n          return node;\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.expectContextual(\"module\");\n    this.expect(types.dot);\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    return this.finishNode(node, \"DeclareTypeAlias\");\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    return this.finishNode(node, \"DeclareOpaqueType\");\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      throw this.unexpected(null, \"`_` is only allowed as a type argument to call or new\");\n    }\n  }\n\n  checkReservedType(word, startLoc) {\n    if (reservedTypes.indexOf(word) > -1) {\n      this.raise(startLoc, `Cannot overwrite reserved type ${word}`);\n    }\n  }\n\n  flowParseRestrictedIdentifier(liberal) {\n    this.checkReservedType(this.state.value, this.state.start);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(allowDefault = true, requireDefault = false) {\n    if (!allowDefault && requireDefault) {\n      throw new Error(\"Cannot disallow a default value (`allowDefault`) while also requiring it (`requireDefault`).\");\n    }\n\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types.eq)) {\n      if (allowDefault) {\n        this.eat(types.eq);\n        node.default = this.flowParseType();\n      } else {\n        this.unexpected();\n      }\n    } else {\n      if (requireDefault) {\n        this.unexpected(nodeStart, \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\");\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration(allowDefault = true) {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(allowDefault, defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types.bracketR);\n    this.expect(types.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration(false);\n    }\n\n    this.expect(types.parenL);\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam();\n    }\n\n    this.expect(types.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types.braceBarL)) {\n      this.expect(types.braceBarL);\n      endDelim = types.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types.braceL);\n      endDelim = types.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.match(types.ellipsis)) {\n      if (!allowSpread) {\n        this.unexpected(null, \"Spread operator cannot appear in class or interface definitions\");\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.unexpected(variance.start, \"Spread properties cannot have variance\");\n      }\n\n      this.expect(types.ellipsis);\n      const isInexactToken = this.eat(types.comma) || this.eat(types.semi);\n\n      if (this.match(types.braceR)) {\n        if (allowInexact) return null;\n        this.unexpected(null, \"Explicit inexact syntax is only allowed inside inexact objects\");\n      }\n\n      if (this.match(types.braceBarR)) {\n        this.unexpected(null, \"Explicit inexact syntax cannot appear inside an explicit exact object type\");\n      }\n\n      if (isInexactToken) {\n        this.unexpected(null, \"Explicit inexact syntax must appear at the end of an inexact object\");\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, \"getter must not have any formal parameters\");\n      } else {\n        this.raise(start, \"setter must have exactly one formal parameter\");\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, \"setter function argument must not be a rest parameter\");\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.parseIdentifier();\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types.bracketL);\n\n    while (this.state.pos < this.state.length && !this.match(types.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types.bracketR)) break;\n      this.expect(types.comma);\n    }\n\n    this.expect(types.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam() {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n\n    if (lh.type === types.colon || lh.type === types.question) {\n      name = this.parseIdentifier();\n\n      if (this.eat(types.question)) {\n        optional = true;\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam();\n    }\n\n    return {\n      params,\n      rest\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types.bracketL:\n        return this.flowParseTupleType();\n\n      case types.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration(false);\n          this.expect(types.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types.parenL:\n        this.next();\n\n        if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          if (this.match(types.name)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types.question && token !== types.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n            this.expect(types.parenR);\n            return type;\n          } else {\n            this.eat(types.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        this.expect(types.parenR);\n        this.expect(types.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types._true:\n      case types._false:\n        node.value = this.match(types._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (!this.match(types.num)) {\n            this.unexpected(null, `Unexpected token, expected \"number\"`);\n          }\n\n          return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n        }\n\n        this.unexpected();\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start,\n          startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n\n    while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.elementType = type;\n      this.expect(types.bracketL);\n      this.expect(types.bracketR);\n      type = this.finishNode(node, \"ArrayTypeAnnotation\");\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.finishNode(ident, ident.type);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    return this.finishNodeAt(node.expression, node.expression.type, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true));\n    }\n\n    return super.parseFunctionBody(node, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, allowExpressionBody) {\n    if (!allowExpressionBody && this.match(types.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, allowExpressionBody);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseInterface(node);\n    } else {\n      const stmt = super.parseStatement(context, topLevel);\n\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n\n      return stmt;\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const state = this.state.clone();\n\n      try {\n        return super.parseConditional(expr, noIn, startPos, startLoc);\n      } catch (err) {\n        if (err instanceof SyntaxError) {\n          this.state = state;\n          refNeedsArrowPos.start = err.pos || this.state.start;\n          return expr;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    this.expect(types.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\");\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n    }\n\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(noIn, undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssign();\n    const failed = !this.match(types.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.toAssignableList(node.params, true, \"arrow function parameters\");\n          super.checkFunctionNameAndParams(node, true);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      for (let i = 0; i < arrows.length; i++) {\n        this.toAssignableList(node.params, true, \"arrow function parameters\");\n      }\n\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => {\n      try {\n        this.toAssignableList(node.params, true, \"arrow function parameters\");\n        return true;\n      } catch (err) {\n        return false;\n      }\n    });\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  getTokenFromCode(code) {\n    const next = this.state.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.isIterator = true;\n      return super.readWord();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  toAssignable(node, isBinding, contextDescription) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isBinding, contextDescription);\n    } else {\n      return super.toAssignable(node, isBinding, contextDescription);\n    }\n  }\n\n  toAssignableList(exprList, isBinding, contextDescription) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, isBinding, contextDescription);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && (!expr.extra || !expr.extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, \"The type cast expression is expected to be wrapped with parenthesis\");\n      }\n    }\n\n    return exprList;\n  }\n\n  checkLVal(expr, isBinding, checkClashes, contextDescription) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, isBinding, checkClashes, contextDescription);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration(false);\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types.comma));\n    }\n  }\n\n  parsePropertyName(node) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\")) {\n      typeParameters = this.flowParseTypeParameterDeclaration(false);\n      if (!this.match(types.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        throw this.raise(param.start, \"A binding pattern parameter cannot be optional in an implementation signature.\");\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    this.finishNode(param, param.type);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, \" + \"e.g. instead of `age = 25: number` use `age: number = 25`\");\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, true, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentLoc = this.state.start;\n    const firstIdent = this.parseIdentifier(true);\n    let specifierTypeKind = null;\n\n    if (firstIdent.name === \"type\") {\n      specifierTypeKind = \"type\";\n    } else if (firstIdent.name === \"typeof\") {\n      specifierTypeKind = \"typeof\";\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(firstIdentLoc, \"The `type` and `typeof` keywords on named imports can only be used on regular \" + \"`import` statements. It cannot be used with `import type` or `import typeof` statements\");\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, true, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseFunctionParams(node) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration(false);\n    }\n\n    super.parseFunctionParams(node);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.finishNode(decl.id, decl.id.type);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n    let jsxError = null;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n      const state = this.state.clone();\n\n      try {\n        return super.parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos);\n      } catch (err) {\n        if (err instanceof SyntaxError) {\n          this.state = state;\n          const cLength = this.state.context.length;\n\n          if (this.state.context[cLength - 1] === types$1.j_oTag) {\n            this.state.context.length -= 2;\n          }\n\n          jsxError = err;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    if (jsxError != null || this.isRelational(\"<\")) {\n      let arrowExpression;\n      let typeParameters;\n\n      try {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => super.parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos));\n        arrowExpression.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(arrowExpression, typeParameters);\n      } catch (err) {\n        throw jsxError || err;\n      }\n\n      if (arrowExpression.type === \"ArrowFunctionExpression\") {\n        return arrowExpression;\n      } else if (jsxError != null) {\n        throw jsxError;\n      } else {\n        this.raise(typeParameters.start, \"Expected an arrow function after this type parameter declaration\");\n      }\n    }\n\n    return super.parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const state = this.state.clone();\n\n      try {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types.arrow)) this.unexpected();\n        node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n      } catch (err) {\n        if (err instanceof SyntaxError) {\n          this.state = state;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkFunctionNameAndParams(node, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    return super.checkFunctionNameAndParams(node, isArrowFunction);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      let error;\n\n      try {\n        const node = this.parseAsyncArrowWithTypeParameters(startPos, startLoc);\n        if (node) return node;\n      } catch (e) {\n        error = e;\n      }\n\n      this.state = state;\n\n      try {\n        return super.parseSubscripts(base, startPos, startLoc, noCalls);\n      } catch (e) {\n        throw error || e;\n      }\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types.questionDot) && this.isLookaheadRelational(\"<\")) {\n      this.expectPlugin(\"optionalChaining\");\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types.parenL);\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      node.optional = true;\n      return this.finishNode(node, \"OptionalCallExpression\");\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const state = this.state.clone();\n\n      try {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n\n        if (subscriptState.optionalChainMember) {\n          node.optional = false;\n          return this.finishNode(node, \"OptionalCallExpression\");\n        }\n\n        return this.finishNode(node, \"CallExpression\");\n      } catch (e) {\n        if (e instanceof SyntaxError) {\n          this.state = state;\n        } else {\n          throw e;\n        }\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n\n      try {\n        targs = this.flowParseTypeParameterInstantiationCallOrNew();\n      } catch (e) {\n        if (e instanceof SyntaxError) {\n          this.state = state;\n        } else {\n          throw e;\n        }\n      }\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.state.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.state.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.unexpected(null, \"Unterminated flow-comment\");\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, \"Cannot have a flow comment inside another flow comment\");\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.state.input.indexOf(\"*-/\", this.state.pos += 2);\n      if (end === -1) this.raise(this.state.pos - 2, \"Unterminated comment\");\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.state.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.state.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.state.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.state.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.state.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      this.raise(this.state.pos, \"Unterminated comment\");\n    }\n  }\n\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.state.length) {\n        this.raise(this.state.start, \"Unterminated JSX contents\");\n      }\n\n      const ch = this.state.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.state.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.state.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.state.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.state.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.state.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.state.length) {\n        this.raise(this.state.start, \"Unterminated string constant\");\n      }\n\n      const ch = this.state.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.state.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.state.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.state.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.state.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.state.length && count++ < 10) {\n      ch = this.state.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.state.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.state.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.jsxParseExpressionContainer();\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          throw this.raise(node.start, \"JSX attributes must only be assigned a non-empty expression\");\n        } else {\n          return node;\n        }\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, \"JSX value should be either an expression or a quoted JSX text\");\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n    this.expect(types.ellipsis);\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      node.expression = this.parseExpression();\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssign();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            if (this.lookahead().type === types.ellipsis) {\n              children.push(this.jsxParseSpreadChild());\n            } else {\n              children.push(this.jsxParseExpressionContainer());\n            }\n\n            break;\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <>\");\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.match(types.relational) && this.state.value === \"<\") {\n      this.raise(this.state.start, \"Adjacent JSX elements must be wrapped in an enclosing tag. \" + \"Did you want a JSX fragment <>...</>?\");\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refShortHandDefaultPos) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.state.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refShortHandDefaultPos);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.state.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n});\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key in defaultOptions) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild && this.state.leadingComments.length > 0) {\n      const lastComment = last(this.state.leadingComments);\n\n      if (firstChild.type === \"ObjectProperty\") {\n        if (lastComment.start >= node.start) {\n          if (this.state.commentPreviousNode) {\n            for (j = 0; j < this.state.leadingComments.length; j++) {\n              if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n                this.state.leadingComments.splice(j, 1);\n                j--;\n              }\n            }\n\n            if (this.state.leadingComments.length > 0) {\n              firstChild.trailingComments = this.state.leadingComments;\n              this.state.leadingComments = [];\n            }\n          }\n        }\n      } else if (node.type === \"CallExpression\" && node.arguments && node.arguments.length) {\n        const lastArg = last(node.arguments);\n\n        if (lastArg && lastComment.start >= lastArg.start && lastComment.end <= node.end) {\n          if (this.state.commentPreviousNode) {\n            for (j = 0; j < this.state.leadingComments.length; j++) {\n              if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n                this.state.leadingComments.splice(j, 1);\n                j--;\n              }\n            }\n\n            if (this.state.leadingComments.length > 0) {\n              lastArg.trailingComments = this.state.leadingComments;\n              this.state.leadingComments = [];\n            }\n          }\n        }\n      }\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        node.trailingComments = trailingComments;\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nclass LocationParser extends CommentsParser {\n  raise(pos, message, {\n    missingPluginNames,\n    code\n  } = {}) {\n    const loc = getLineInfo(this.state.input, pos);\n    message += ` (${loc.line}:${loc.column})`;\n    const err = new SyntaxError(message);\n    err.pos = pos;\n    err.loc = loc;\n\n    if (missingPluginNames) {\n      err.missingPlugin = missingPluginNames;\n    }\n\n    if (code !== undefined) {\n      err.code = code;\n    }\n\n    throw err;\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.commaAfterSpreadAt = -1;\n    this.inFunction = false;\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.inGenerator = false;\n    this.inMethod = false;\n    this.inAsync = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.inClassProperty = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.classLevel = 0;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.tokens = [];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.containsOctal = false;\n    this.octalPosition = null;\n    this.exportedIdentifiers = [];\n    this.invalidTemplateEscapePosition = null;\n  }\n\n  init(options, input) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.input = input;\n    this.length = input.length;\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if ((!skipArrays || key === \"context\") && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends LocationParser {\n  constructor(options, input) {\n    super();\n    this.state = new State();\n    this.state.init(options, input);\n    this.isLookahead = false;\n  }\n\n  next() {\n    if (this.options.tokens && !this.isLookahead) {\n      this.state.tokens.push(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.state.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n    this.state.containsOctal = false;\n    this.state.octalPosition = null;\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.state.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    if (curContext.override) {\n      curContext.override(this);\n    } else {\n      this.getTokenFromCode(this.state.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n\n    if (!this.isLookahead) {\n      if (this.options.tokens) this.state.tokens.push(comment);\n      this.state.comments.push(comment);\n      this.addComment(comment);\n    }\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.state.input.indexOf(\"*/\", this.state.pos += 2);\n    if (end === -1) this.raise(this.state.pos - 2, \"Unterminated comment\");\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.state.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    this.pushComment(true, this.state.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.state.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.state.length) {\n      while (ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233 && ++this.state.pos < this.state.length) {\n        ch = this.state.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    this.pushComment(false, this.state.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.state.length) {\n      const ch = this.state.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.state.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.state.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.state.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      this.raise(this.state.pos, \"Unexpected digit after hash token\");\n    }\n\n    if ((this.hasPlugin(\"classPrivateProperties\") || this.hasPlugin(\"classPrivateMethods\")) && this.state.classLevel > 0) {\n      ++this.state.pos;\n      this.finishToken(types.hash);\n      return;\n    } else if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      this.finishOp(types.hash, 1);\n    } else {\n      this.raise(this.state.pos, \"Unexpected character '#'\");\n    }\n  }\n\n  readToken_dot() {\n    const next = this.state.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    const next2 = this.state.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 46 && next2 === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.state.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.state.length < 2) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n    let ch = this.state.input.charCodeAt(this.state.pos);\n    if (ch !== 33) return false;\n\n    while (ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233 && ++this.state.pos < this.state.length) {\n      ch = this.state.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.state.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.state.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.state.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.state.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.state.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.state.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.state.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.state.input.charCodeAt(this.state.pos + 2) === 62 && lineBreak.test(this.state.input.slice(this.state.lastTokEnd, this.state.pos))) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.state.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.state.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.state.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.state.input.charCodeAt(this.state.pos + 2) === 45 && this.state.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.state.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.state.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.state.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.state.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63 && !this.state.inType) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        ++this.state.pos;\n        this.finishToken(types.bracketL);\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        ++this.state.pos;\n        this.finishToken(types.braceL);\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.state.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.state.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    this.raise(this.state.pos, `Unexpected character '${String.fromCodePoint(code)}'`);\n  }\n\n  finishOp(type, size) {\n    const str = this.state.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.state.length) {\n        this.raise(start, \"Unterminated regular expression\");\n      }\n\n      const ch = this.state.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        this.raise(start, \"Unterminated regular expression\");\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.state.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.state.length) {\n      const char = this.state.input[this.state.pos];\n      const charCode = this.state.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, \"Duplicate regular expression flag\");\n        }\n\n        ++this.state.pos;\n        mods += char;\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, \"Invalid regular expression flag\");\n      } else {\n        break;\n      }\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.state.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        const prev = this.state.input.charCodeAt(this.state.pos - 1);\n        const next = this.state.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 95) {\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, \"Invalid or unexpected token\");\n          }\n\n          if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n            this.raise(this.state.pos, \"Invalid or unexpected token\");\n          }\n\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) break;\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, \"Expected number in radix \" + radix);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (this.state.input.charCodeAt(this.state.pos) === 110) {\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.state.input.codePointAt(this.state.pos))) {\n      this.raise(this.state.pos, \"Identifier directly after number\");\n    }\n\n    if (isBigInt) {\n      const str = this.state.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, \"Invalid number\");\n    }\n\n    let octal = this.state.pos - start >= 2 && this.state.input.charCodeAt(start) === 48;\n\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(start, \"Legacy octal literals are not allowed in strict mode\");\n      }\n\n      if (/[89]/.test(this.state.input.slice(start, this.state.pos))) {\n        octal = false;\n      }\n    }\n\n    let next = this.state.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.state.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !octal) {\n      next = this.state.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n      next = this.state.input.charCodeAt(this.state.pos);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (next === 110) {\n        if (isFloat || octal) this.raise(start, \"Invalid BigIntLiteral\");\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.state.input.codePointAt(this.state.pos))) {\n      this.raise(this.state.pos, \"Identifier directly after number\");\n    }\n\n    const str = this.state.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.state.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.state.input.indexOf(\"}\", this.state.pos) - this.state.pos, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code === null) {\n        --this.state.invalidTemplateEscapePosition;\n      } else if (code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, \"Code point out of bounds\");\n        } else {\n          this.state.invalidTemplateEscapePosition = codePos - 2;\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.state.length) {\n        this.raise(this.state.start, \"Unterminated string constant\");\n      }\n\n      const ch = this.state.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.state.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n      } else if (isNewLine(ch)) {\n        this.raise(this.state.start, \"Unterminated string constant\");\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.state.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.state.length) {\n        this.raise(this.state.start, \"Unterminated template\");\n      }\n\n      const ch = this.state.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.state.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.state.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.state.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.state.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.state.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.state.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.state.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          let octalStr = this.state.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          if (octal > 0) {\n            if (inTemplate) {\n              this.state.invalidTemplateEscapePosition = codePos;\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, \"Octal literal in strict mode\");\n            } else if (!this.state.containsOctal) {\n              this.state.containsOctal = true;\n              this.state.octalPosition = codePos;\n            }\n          }\n\n          this.state.pos += octalStr.length - 1;\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, \"Bad character escape sequence\");\n      } else {\n        this.state.pos = codePos - 1;\n        this.state.invalidTemplateEscapePosition = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.state.length) {\n      const ch = this.state.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.state.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.state.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (!identifierCheck(esc, true)) {\n          this.raise(escStart, \"Invalid Unicode escape\");\n        }\n\n        word += String.fromCodePoint(esc);\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.state.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords[word] || types.name;\n\n    if (type.keyword && this.state.containsEsc) {\n      this.raise(this.state.pos, `Escape sequence in keyword ${word}`);\n    }\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, `Invalid identifier ${word}`);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return lineBreak.test(this.state.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op) {\n    const l = this.lookahead();\n    return l.type === types.relational && l.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  eatRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isLookaheadContextual(name) {\n    const l = this.lookahead();\n    return l.type === types.name && l.value === name;\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.state.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raise(pos != null ? pos : this.state.start, `This experimental syntax requires enabling the parser plugin: '${name}'`, {\n        missingPluginNames: [name]\n      });\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raise(pos != null ? pos : this.state.start, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`, {\n        missingPluginNames: names\n      });\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (this.state.yieldPos && (!this.state.awaitPos || this.state.yieldPos < this.state.awaitPos)) {\n      this.raise(this.state.yieldPos, \"Yield cannot be used as name inside a generator function\");\n    }\n\n    if (this.state.awaitPos) {\n      this.raise(this.state.awaitPos, \"Await cannot be used as name inside an async function\");\n    }\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser && parser.options.ranges) this.range = [pos, 0];\n    if (parser && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isBinding, contextDescription) {\n    if (node) {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          break;\n\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n\n          for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n            const prop = node.properties[i];\n            const isLast = i === last;\n            this.toAssignableObjectExpressionProp(prop, isBinding, isLast);\n          }\n\n          break;\n\n        case \"ObjectProperty\":\n          this.toAssignable(node.value, isBinding, contextDescription);\n          break;\n\n        case \"SpreadElement\":\n          {\n            this.checkToRestConversion(node);\n            node.type = \"RestElement\";\n            const arg = node.argument;\n            this.toAssignable(arg, isBinding, contextDescription);\n            break;\n          }\n\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(node.elements, isBinding, contextDescription);\n          break;\n\n        case \"AssignmentExpression\":\n          if (node.operator === \"=\") {\n            node.type = \"AssignmentPattern\";\n            delete node.operator;\n          } else {\n            this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n          }\n\n          break;\n\n        case \"MemberExpression\":\n          if (!isBinding) break;\n\n        default:\n          {\n            const message = \"Invalid left-hand side\" + (contextDescription ? \" in \" + contextDescription : \"expression\");\n            this.raise(node.start, message);\n          }\n      }\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isBinding, isLast) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? \"Object pattern can't contain getter or setter\" : \"Object pattern can't contain methods\";\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start, \"property\");\n    } else {\n      this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n    }\n  }\n\n  toAssignableList(exprList, isBinding, contextDescription) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if (last && last.type === \"RestElement\") {\n        --end;\n      } else if (last && last.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg, isBinding, contextDescription);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isBinding, contextDescription);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start, \"element\");\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if (expr && expr.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseSpread(refShorthandDefaultPos, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refShorthandDefaultPos, undefined, refNeedsArrowPos);\n\n    if (this.state.commaAfterSpreadAt === -1 && this.match(types.comma)) {\n      this.state.commaAfterSpreadAt = this.state.start;\n    }\n\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRest() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.name:\n        return this.parseIdentifier();\n\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObj(true);\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBindingList(close, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRest()));\n        this.checkCommaAfterRest(close, this.state.inFunction && this.state.inParameters ? \"parameter\" : \"element\");\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, \"Stage 2 decorators cannot be used to decorate parameters\");\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, isBinding, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (this.state.strict && isStrictBindReservedWord(expr.name, this.inModule)) {\n          this.raise(expr.start, `${isBinding ? \"Binding\" : \"Assigning to\"} '${expr.name}' in strict mode`);\n        }\n\n        if (checkClashes) {\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, \"Argument name clash in strict mode\");\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n\n        break;\n\n      case \"MemberExpression\":\n        if (isBinding) this.raise(expr.start, \"Binding member expression\");\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;\n          this.checkLVal(prop, isBinding, checkClashes, \"object destructuring pattern\");\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, isBinding, checkClashes, \"array destructuring pattern\");\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, isBinding, checkClashes, \"assignment pattern\");\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, isBinding, checkClashes, \"rest element\");\n        break;\n\n      default:\n        {\n          const message = (isBinding ? \"Binding invalid\" : \"Invalid\") + \" left-hand side\" + (contextDescription ? \" in \" + contextDescription : \"expression\");\n          this.raise(expr.start, message);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, \"Invalid rest operator's argument\");\n    }\n  }\n\n  checkCommaAfterRest(close, kind) {\n    if (this.match(types.comma)) {\n      if (this.lookahead().type === close) {\n        this.raiseCommaAfterRest(this.state.start, kind);\n      } else {\n        this.raiseRestNotLast(this.state.start, kind);\n      }\n    }\n  }\n\n  checkCommaAfterRestFromSpread(kind) {\n    if (this.state.commaAfterSpreadAt > -1) {\n      this.raiseCommaAfterRest(this.state.commaAfterSpreadAt, kind);\n    }\n  }\n\n  raiseCommaAfterRest(pos, kind) {\n    this.raise(pos, `A trailing comma is not permitted after the rest ${kind}`);\n  }\n\n  raiseRestNotLast(pos, kind) {\n    this.raise(pos, `The rest ${kind} must be the last ${kind}`);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkPropClash(prop, propHash) {\n    if (prop.computed || prop.kind) return;\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      if (propHash.proto) {\n        this.raise(key.start, \"Redefinition of __proto__ property\");\n      }\n\n      propHash.proto = true;\n    }\n  }\n\n  getExpression() {\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    return expr;\n  }\n\n  parseExpression(noIn, refShorthandDefaultPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.state.inGenerator) {\n        let left = this.parseYield(noIn);\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      } else {\n        this.state.exprAllowed = false;\n      }\n    }\n\n    const oldCommaAfterSpreadAt = this.state.commaAfterSpreadAt;\n    this.state.commaAfterSpreadAt = -1;\n    let failOnShorthandAssign;\n\n    if (refShorthandDefaultPos) {\n      failOnShorthandAssign = false;\n    } else {\n      refShorthandDefaultPos = {\n        start: 0\n      };\n      failOnShorthandAssign = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"nullishCoalescingOperator\");\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      node.left = this.match(types.eq) ? this.toAssignable(left, undefined, \"assignment expression\") : left;\n      refShorthandDefaultPos.start = 0;\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n      let patternErrorMsg;\n      let elementName;\n\n      if (left.type === \"ObjectPattern\") {\n        patternErrorMsg = \"`({a}) = 0` use `({a} = 0)`\";\n        elementName = \"property\";\n      } else if (left.type === \"ArrayPattern\") {\n        patternErrorMsg = \"`([a]) = 0` use `([a] = 0)`\";\n        elementName = \"element\";\n      }\n\n      if (patternErrorMsg && left.extra && left.extra.parenthesized) {\n        this.raise(left.start, `You're trying to assign to a parenthesized expression, eg. instead of ${patternErrorMsg}`);\n      }\n\n      if (elementName) this.checkCommaAfterRestFromSpread(elementName);\n      this.state.commaAfterSpreadAt = oldCommaAfterSpreadAt;\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    this.state.commaAfterSpreadAt = oldCommaAfterSpreadAt;\n    return left;\n  }\n\n  parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refShorthandDefaultPos);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n    return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(noIn, refShorthandDefaultPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refShorthandDefaultPos);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    const prec = this.state.type.binop;\n\n    if (prec != null && (!noIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        const operator = this.state.value;\n        node.left = left;\n        node.operator = operator;\n\n        if (operator === \"**\" && left.type === \"UnaryExpression\" && !(left.extra && left.extra.parenthesized)) {\n          this.raise(left.argument.start, \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\");\n        }\n\n        const op = this.state.type;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (op === types.nullishCoalescing) {\n          this.expectPlugin(\"nullishCoalescingOperator\");\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.state.inAsync) {\n            throw this.raise(this.state.start, `Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal`);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n        this.finishNode(node, op === types.logicalOR || op === types.logicalAND || op === types.nullishCoalescing ? \"LogicalExpression\" : \"BinaryExpression\");\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec, noIn) {\n    switch (op) {\n      case types.pipeline:\n        if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n          const startPos = this.state.start;\n          const startLoc = this.state.startLoc;\n          return this.withTopicPermittingContext(() => {\n            return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec, noIn), startPos, startLoc);\n          });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);\n  }\n\n  parseMaybeUnary(refShorthandDefaultPos) {\n    if (this.isContextual(\"await\") && (this.state.inAsync || !this.state.inFunction && this.options.allowAwaitOutsideFunction)) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(types.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      this.next();\n      node.argument = this.parseMaybeUnary();\n\n      if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n        this.unexpected(refShorthandDefaultPos.start);\n      }\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, \"Deleting local variable in strict mode\");\n        } else if (arg.type === \"MemberExpression\" && arg.property.type === \"PrivateName\") {\n          this.raise(node.start, \"Deleting a private field is not allowed\");\n        }\n      }\n\n      return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refShorthandDefaultPos);\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refShorthandDefaultPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refShorthandDefaultPos);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    } else if (this.match(types.questionDot)) {\n      this.expectPlugin(\"optionalChaining\");\n      state.optionalChainMember = true;\n\n      if (noCalls && this.lookahead().type === types.parenL) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n\n      if (this.eat(types.bracketL)) {\n        node.object = base;\n        node.property = this.parseExpression();\n        node.computed = true;\n        node.optional = true;\n        this.expect(types.bracketR);\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else if (this.eat(types.parenL)) {\n        const possibleAsync = this.atPossibleAsync(base);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, possibleAsync);\n        node.optional = true;\n        return this.finishNode(node, \"OptionalCallExpression\");\n      } else {\n        node.object = base;\n        node.property = this.parseIdentifier(true);\n        node.computed = false;\n        node.optional = true;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n    } else if (this.eat(types.dot)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseMaybePrivateName();\n      node.computed = false;\n\n      if (state.optionalChainMember) {\n        node.optional = false;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n\n      return this.finishNode(node, \"MemberExpression\");\n    } else if (this.eat(types.bracketL)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseExpression();\n      node.computed = true;\n      this.expect(types.bracketR);\n\n      if (state.optionalChainMember) {\n        node.optional = false;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n\n      return this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.match(types.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = 0;\n      this.state.awaitPos = 0;\n      const possibleAsync = this.atPossibleAsync(base);\n      this.next();\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const oldCommaAfterSpreadAt = this.state.commaAfterSpreadAt;\n      this.state.commaAfterSpreadAt = -1;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, possibleAsync, base.type === \"Import\");\n\n      if (!state.optionalChainMember) {\n        this.finishCallExpression(node);\n      } else {\n        this.finishOptionalCallExpression(node);\n      }\n\n      if (possibleAsync && this.shouldParseAsyncArrow()) {\n        state.stop = true;\n        this.checkCommaAfterRestFromSpread(\"parameter\");\n        node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n        this.state.yieldPos = oldYieldPos || this.state.yieldPos;\n        this.state.awaitPos = oldAwaitPos || this.state.awaitPos;\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.commaAfterSpreadAt = oldCommaAfterSpreadAt;\n      return node;\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(startPos, startLoc, base, state);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, \"Tagged Template Literals are not allowed in optionalChain\");\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsync(base) {\n    return !this.state.containsEsc && this.state.potentialArrowAt === base.start && base.type === \"Identifier\" && base.name === \"async\" && !this.canInsertSemicolon();\n  }\n\n  finishCallExpression(node) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, \"import() requires exactly one argument\");\n      }\n\n      const importArg = node.arguments[0];\n\n      if (importArg && importArg.type === \"SpreadElement\") {\n        this.raise(importArg.start, \"... is not allowed in import()\");\n      }\n    }\n\n    return this.finishNode(node, \"CallExpression\");\n  }\n\n  finishOptionalCallExpression(node) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, \"import() requires exactly one argument\");\n      }\n\n      const importArg = node.arguments[0];\n\n      if (importArg && importArg.type === \"SpreadElement\") {\n        this.raise(importArg.start, \"... is not allowed in import()\");\n      }\n    }\n\n    return this.finishNode(node, \"OptionalCallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport) {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.eat(close)) {\n          if (dynamicImport) {\n            this.raise(this.state.lastTokStart, \"Trailing comma is disallowed inside import(...) arguments\");\n          }\n\n          break;\n        }\n      }\n\n      if (this.match(types.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined));\n    }\n\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow);\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refShorthandDefaultPos) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        if (!this.state.inMethod && !this.state.inClassProperty && !this.options.allowSuperOutsideMethod) {\n          this.raise(this.state.start, \"super is only allowed in object methods and classes\");\n        }\n\n        node = this.startNode();\n        this.next();\n\n        if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n          this.unexpected();\n        }\n\n        if (this.match(types.parenL) && this.state.inMethod !== \"constructor\" && !this.options.allowSuperOutsideMethod) {\n          this.raise(node.start, \"super() is only valid inside a class constructor. \" + \"Make sure the method name is spelled exactly as 'constructor'.\");\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case types._import:\n        if (this.lookahead().type === types.dot) {\n          return this.parseImportMetaProperty();\n        }\n\n        this.expectPlugin(\"dynamicImport\");\n        node = this.startNode();\n        this.next();\n\n        if (!this.match(types.parenL)) {\n          this.unexpected(null, types.parenL);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          node = this.startNode();\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && this.match(types._function) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseFunction(node, false, false, true);\n          } else if (canBeArrow && id.name === \"async\" && this.match(types.name) && !this.canInsertSemicolon()) {\n            const oldInAsync = this.state.inAsync;\n            this.state.inAsync = true;\n            const params = [this.parseIdentifier()];\n            this.expect(types.arrow);\n            this.parseArrowExpression(node, params, true);\n            this.state.inAsync = oldInAsync;\n            return node;\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            this.parseArrowExpression(node, [id], false);\n            return node;\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          this.expectPlugin(\"doExpressions\");\n          const node = this.startNode();\n          this.next();\n          const oldInFunction = this.state.inFunction;\n          const oldLabels = this.state.labels;\n          this.state.labels = [];\n          this.state.inFunction = false;\n          node.body = this.parseBlock(false);\n          this.state.inFunction = oldInFunction;\n          this.state.labels = oldLabels;\n          return this.finishNode(node, \"DoExpression\");\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketL:\n        node = this.startNode();\n        this.next();\n        node.elements = this.parseExprList(types.bracketR, true, refShorthandDefaultPos);\n\n        if (!this.state.maybeInArrowParameters) {\n          this.toReferencedList(node.elements);\n        }\n\n        return this.finishNode(node, \"ArrayExpression\");\n\n      case types.braceL:\n        return this.parseObj(false, refShorthandDefaultPos);\n\n      case types._function:\n        return this.parseFunctionExpression();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNew();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, \"Binding should be performed on object property.\");\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\");\n            }\n\n            this.next();\n\n            if (this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.registerTopicReference();\n              return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n            } else {\n              throw this.raise(node.start, `Topic reference was used in a lexical context without topic binding`);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName() {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      const node = this.startNode();\n      const columnHashEnd = this.state.end;\n      this.next();\n      const columnIdentifierStart = this.state.start;\n      const spacesBetweenHashAndIdentifier = columnIdentifierStart - columnHashEnd;\n\n      if (spacesBetweenHashAndIdentifier != 0) {\n        this.raise(columnIdentifierStart, \"Unexpected space between # and identifier\");\n      }\n\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression() {\n    const node = this.startNode();\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.state.inGenerator && this.eat(types.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node, false);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, `The only valid meta property for ${meta.name} is ${meta.name}.${propertyName}`);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty() {\n    const node = this.startNode();\n    const id = this.parseIdentifier(true);\n    this.expect(types.dot);\n\n    if (id.name === \"import\") {\n      if (this.isContextual(\"meta\")) {\n        this.expectPlugin(\"importMeta\");\n      } else if (!this.hasPlugin(\"importMeta\")) {\n        this.raise(id.start, `Dynamic imports require a parameter: import('a.js')`);\n      }\n    }\n\n    if (!this.inModule) {\n      this.raise(id.start, `import.meta may appear only with 'sourceType: \"module\"'`, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      });\n    }\n\n    this.sawUnambiguousESM = true;\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.state.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.expect(types.parenL);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = 0;\n    this.state.awaitPos = 0;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refShorthandDefaultPos = {\n      start: 0\n    };\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(types.parenR, \"parameter\");\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      for (let _i = 0; _i < exprList.length; _i++) {\n        const param = exprList[_i];\n\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.state.yieldPos = oldYieldPos || this.state.yieldPos;\n    this.state.awaitPos = oldAwaitPos || this.state.awaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n\n    if (refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    this.addExtra(val, \"parenthesized\", true);\n    this.addExtra(val, \"parenStart\", startPos);\n    return val;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNew() {\n    const node = this.startNode();\n    const meta = this.parseIdentifier(true);\n\n    if (this.eat(types.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.state.inFunction && !this.state.inClassProperty) {\n        let error = \"new.target can only be used in functions\";\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, \"Cannot use new with import(...)\");\n    } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, \"constructors in/after an Optional Chain are not allowed\");\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, \"constructors in/after an Optional Chain are not allowed\");\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.invalidTemplateEscapePosition || 0, \"Invalid escape sequence in template\");\n      } else {\n        this.state.invalidTemplateEscapePosition = null;\n      }\n    }\n\n    elem.value = {\n      raw: this.state.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseObj(isPattern, refShorthandDefaultPos) {\n    let decorators = [];\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      if (this.match(types.at)) {\n        if (this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, \"Stage 2 decorators disallow object literal property decorators\");\n        } else {\n          while (this.match(types.at)) {\n            decorators.push(this.parseDecorator());\n          }\n        }\n      }\n\n      let prop = this.startNode(),\n          isGenerator = false,\n          isAsync = false,\n          startPos,\n          startLoc;\n\n      if (decorators.length) {\n        prop.decorators = decorators;\n        decorators = [];\n      }\n\n      if (this.match(types.ellipsis)) {\n        prop = this.parseSpread(isPattern ? {\n          start: 0\n        } : undefined);\n        node.properties.push(prop);\n\n        if (isPattern) {\n          this.toAssignable(prop, true, \"object pattern\");\n          this.checkCommaAfterRest(types.braceR, \"property\");\n          this.expect(types.braceR);\n          break;\n        }\n\n        continue;\n      }\n\n      prop.method = false;\n\n      if (isPattern || refShorthandDefaultPos) {\n        startPos = this.state.start;\n        startLoc = this.state.startLoc;\n      }\n\n      if (!isPattern) {\n        isGenerator = this.eat(types.star);\n      }\n\n      const containsEsc = this.state.containsEsc;\n\n      if (!isPattern && this.isContextual(\"async\")) {\n        if (isGenerator) this.unexpected();\n        const asyncId = this.parseIdentifier();\n\n        if (this.match(types.colon) || this.match(types.parenL) || this.match(types.braceR) || this.match(types.eq) || this.match(types.comma)) {\n          prop.key = asyncId;\n          prop.computed = false;\n        } else {\n          isAsync = true;\n          isGenerator = this.eat(types.star);\n          this.parsePropertyName(prop);\n        }\n      } else {\n        this.parsePropertyName(prop);\n      }\n\n      this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc);\n      this.checkPropClash(prop, propHash);\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    if (decorators.length) {\n      this.raise(this.state.start, \"You have trailing decorators with no property\");\n    }\n\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n  }\n\n  isGetterOrSetterMethod(prop, isPattern) {\n    return !isPattern && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.match(types.string) || this.match(types.num) || this.match(types.bracketL) || this.match(types.name) || !!this.state.type.keyword);\n  }\n\n  checkGetterSetterParams(method) {\n    const paramCount = method.kind === \"get\" ? 0 : 1;\n    const start = method.start;\n\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, \"getter must not have any formal parameters\");\n      } else {\n        this.raise(start, \"setter must have exactly one formal parameter\");\n      }\n    }\n\n    if (method.kind === \"set\" && method.params[0].type === \"RestElement\") {\n      this.raise(start, \"setter function argument must not be a rest parameter\");\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, \"ObjectMethod\");\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop);\n      this.parseMethod(prop, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refShorthandDefaultPos) {\n        if (!refShorthandDefaultPos.start) {\n          refShorthandDefaultPos.start = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseMaybePrivateName();\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, type) {\n    const oldInFunc = this.state.inFunction;\n    const oldInMethod = this.state.inMethod;\n    const oldInAsync = this.state.inAsync;\n    const oldInGenerator = this.state.inGenerator;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.inFunction = true;\n    this.state.inMethod = node.kind || true;\n    this.state.inAsync = isAsync;\n    this.state.inGenerator = isGenerator;\n    this.state.yieldPos = 0;\n    this.state.awaitPos = 0;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.parseFunctionParams(node, allowModifiers);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBodyAndFinish(node, type);\n    this.state.inFunction = oldInFunc;\n    this.state.inMethod = oldInMethod;\n    this.state.inAsync = oldInAsync;\n    this.state.inGenerator = oldInGenerator;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseArrowExpression(node, params, isAsync) {\n    this.initFunction(node, isAsync);\n    const oldInFunc = this.state.inFunction;\n    const oldInAsync = this.state.inAsync;\n    const oldInGenerator = this.state.inGenerator;\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.inFunction = true;\n    this.state.inAsync = isAsync;\n    this.state.inGenerator = false;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = 0;\n    this.state.awaitPos = 0;\n    if (params) this.setArrowFunctionParameters(node, params);\n    this.parseFunctionBody(node, true);\n    this.state.inAsync = oldInAsync;\n    this.state.inGenerator = oldInGenerator;\n    this.state.inFunction = oldInFunc;\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params) {\n    node.params = this.toAssignableList(params, true, \"arrow function parameters\");\n  }\n\n  isStrictBody(node) {\n    const isBlockStatement = node.body.type === \"BlockStatement\";\n\n    if (isBlockStatement && node.body.directives.length) {\n      for (let _i2 = 0, _node$body$directives = node.body.directives; _i2 < _node$body$directives.length; _i2++) {\n        const directive = _node$body$directives[_i2];\n\n        if (directive.value.value === \"use strict\") {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  parseFunctionBodyAndFinish(node, type, allowExpressionBody) {\n    this.parseFunctionBody(node, allowExpressionBody);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n    } else {\n      const oldInFunc = this.state.inFunction;\n      const oldLabels = this.state.labels;\n      this.state.inFunction = true;\n      this.state.labels = [];\n      node.body = this.parseBlock(true);\n      this.state.inFunction = oldInFunc;\n      this.state.labels = oldLabels;\n    }\n\n    this.checkFunctionNameAndParams(node, allowExpression);\n    this.state.inParameters = oldInParameters;\n  }\n\n  checkFunctionNameAndParams(node, isArrowFunction) {\n    const isStrict = this.isStrictBody(node);\n    const checkLVal = this.state.strict || isStrict || isArrowFunction;\n    const oldStrict = this.state.strict;\n    if (isStrict) this.state.strict = isStrict;\n\n    if (checkLVal) {\n      const nameHash = Object.create(null);\n\n      if (node.id) {\n        this.checkLVal(node.id, true, undefined, \"function name\");\n      }\n\n      for (let _i3 = 0, _node$params = node.params; _i3 < _node$params.length; _i3++) {\n        const param = _node$params[_i3];\n\n        if (isStrict && param.type !== \"Identifier\") {\n          this.raise(param.start, \"Non-simple parameter in strict mode\");\n        }\n\n        this.checkLVal(param, true, nameHash, \"function parameter list\");\n      }\n    }\n\n    this.state.strict = oldStrict;\n  }\n\n  parseExprList(close, allowEmpty, refShorthandDefaultPos) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(close)) break;\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refShorthandDefaultPos, refNeedsArrowPos) {\n    let elt;\n\n    if (allowEmpty && this.match(types.comma)) {\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refShorthandDefaultPos, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else {\n      elt = this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n\n    if (this.match(types.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n\n      if ((name === \"class\" || name === \"function\") && (this.state.lastTokEnd !== this.state.lastTokStart + 1 || this.state.input.charCodeAt(this.state.lastTokStart) !== 46)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (!liberal) {\n      this.checkReservedWord(name, this.state.start, !!this.state.type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    const state = this.state;\n\n    if (state.inGenerator && word === \"yield\") {\n      this.raise(startLoc, \"Can not use 'yield' as identifier inside a generator\");\n    }\n\n    if (state.inAsync && word === \"await\") {\n      this.raise(startLoc, \"Can not use 'await' as identifier inside an async function\");\n    }\n\n    if (state.inClassProperty && word === \"arguments\") {\n      this.raise(startLoc, \"'arguments' is not allowed in class field initializer\");\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, `Unexpected keyword '${word}'`);\n    }\n\n    const reservedTest = !state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!state.inAsync && word === \"await\") {\n        this.raise(startLoc, \"Can not use keyword 'await' outside an async function\");\n      }\n\n      this.raise(startLoc, `Unexpected reserved word '${word}'`);\n    }\n  }\n\n  parseAwait() {\n    if (!this.state.awaitPos) {\n      this.state.awaitPos = this.state.start;\n    }\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, \"await is not allowed in async function parameters\");\n    }\n\n    if (this.match(types.star)) {\n      this.raise(node.start, \"await* has been removed from the async functions proposal. Use Promise.all() instead.\");\n    }\n\n    node.argument = this.parseMaybeUnary();\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield(noIn) {\n    if (!this.state.yieldPos) {\n      this.state.yieldPos = this.state.start;\n    }\n\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, \"yield is not allowed in generator parameters\");\n    }\n\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.canInsertSemicolon()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        throw this.raise(leftStartPos, `Pipeline head should not be a comma-separated sequence expression`);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, `Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized`);\n    } else if (pipelineStyle === \"PipelineTopicExpression\" && childExpression.type === \"SequenceExpression\") {\n      throw this.raise(startPos, `Pipeline body may not be a comma-separated sequence expression`);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          throw this.raise(startPos, `Pipeline is in topic style but does not use topic reference`);\n        }\n\n        bodyNode.expression = childExpression;\n        break;\n\n      default:\n        throw this.raise(startPos, `Unknown pipeline style ${pipelineStyle}`);\n    }\n\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression) {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression) ? \"PipelineBareFunction\" : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n}\n\nconst empty = [];\nconst loopLabel = {\n  kind: \"loop\"\n};\nconst switchLabel = {\n  kind: \"switch\"\n};\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.state.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.state.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    skipWhiteSpace.lastIndex = this.state.pos;\n    const skip = skipWhiteSpace.exec(this.state.input);\n    const next = this.state.pos + skip[0].length;\n    const nextCh = this.state.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.state.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.state.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        {\n          if (this.lookahead().type === types.dot) break;\n\n          if (context && (this.state.strict || context !== \"if\" && context !== \"label\")) {\n            this.raise(this.state.start, \"Function declaration not allowed in this context\");\n          }\n\n          const result = this.parseFunctionStatement(node);\n\n          if (context && result.generator) {\n            this.unexpected(node.start);\n          }\n\n          return result;\n        }\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") this.unexpected();\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._export:\n      case types._import:\n        {\n          const nextToken = this.lookahead();\n\n          if (nextToken.type === types.parenL || nextToken.type === types.dot) {\n            break;\n          }\n\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, \"'import' and 'export' may only appear at the top level\");\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      case types.name:\n        if (this.isContextual(\"async\")) {\n          const state = this.state.clone();\n          this.next();\n\n          if (this.match(types._function) && !this.canInsertSemicolon()) {\n            if (context) {\n              this.raise(this.state.lastTokStart, \"Function declaration not allowed in this context\");\n            }\n\n            this.next();\n            return this.parseFunction(node, true, false, true);\n          } else {\n            this.state = state;\n          }\n        }\n\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, `'import' and 'export' may appear only with 'sourceType: \"module\"'`, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      });\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, \"Using the export keyword between a decorator and a class is not allowed. \" + \"Please use `export @dec class` instead.\");\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      this.raise(this.state.start, \"Leading decorators must be attached to a class declaration\");\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else if (!this.match(types.name)) {\n      this.unexpected();\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, \"Unsyntactic \" + keyword);\n    }\n\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseParenExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if ((this.state.inAsync || !this.state.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (this.match(types._in) || this.isContextual(\"of\")) {\n        if (init.declarations.length === 1) {\n          const declaration = init.declarations[0];\n          const isForInInitializer = kind === \"var\" && declaration.init && declaration.id.type != \"ObjectPattern\" && declaration.id.type != \"ArrayPattern\" && !this.isContextual(\"of\");\n\n          if (this.state.strict && isForInInitializer) {\n            this.raise(this.state.start, \"for-in initializer in strict mode\");\n          } else if (isForInInitializer || !declaration.init) {\n            return this.parseForIn(node, init, awaitAt);\n          }\n        }\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refShorthandDefaultPos = {\n      start: 0\n    };\n    const init = this.parseExpression(true, refShorthandDefaultPos);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.toAssignable(init, undefined, description);\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else if (refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node) {\n    this.next();\n    return this.parseFunction(node, true);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, \"'return' outside of function\");\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, \"Multiple default clauses\");\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (lineBreak.test(this.state.input.slice(this.state.lastTokEnd, this.state.start))) {\n      this.raise(this.state.lastTokEnd, \"Illegal newline after throw\");\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseBindingAtom();\n        const clashes = Object.create(null);\n        this.checkLVal(clause.param, true, clashes, \"catch clause\");\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false));\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.guardedHandlers = empty;\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, \"Missing catch or finally clause\");\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, \"'with' in strict mode\");\n    }\n\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i = 0, _this$state$labels = this.state.labels; _i < _this$state$labels.length; _i++) {\n      const label = _this$state$labels[_i];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, `Label '${maybeName}' is already declared`);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives) {\n    const node = this.startNode();\n    this.expect(types.braceL);\n    this.parseBlockBody(node, allowDirectives, false, types.braceR);\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end) {\n    let parsedNonDirective = false;\n    let oldStrict;\n    let octalPosition;\n\n    while (!this.eat(end)) {\n      if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {\n        octalPosition = this.state.octalPosition;\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (oldStrict === undefined && directive.value.value === \"use strict\") {\n          oldStrict = this.state.strict;\n          this.setStrict(true);\n\n          if (octalPosition) {\n            this.raise(octalPosition, \"Octal literal in strict mode\");\n          }\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (oldStrict === false) {\n      this.setStrict(false);\n    }\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const type = this.match(types._in) ? \"ForInStatement\" : \"ForOfStatement\";\n\n    if (awaitAt > -1) {\n      this.eatContextual(\"of\");\n    } else {\n      this.next();\n    }\n\n    if (type === \"ForOfStatement\") {\n      node.await = awaitAt > -1;\n    }\n\n    node.left = init;\n    node.right = this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.state.labels.pop();\n    return this.finishNode(node, type);\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, \"Complex binding patterns require an initialization value\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    if ((kind === \"const\" || kind === \"let\") && this.isContextual(\"let\")) {\n      this.unexpected(null, \"let is disallowed as a lexically bound name\");\n    }\n\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, true, undefined, \"variable declaration\");\n  }\n\n  parseFunction(node, isStatement, allowExpressionBody = false, isAsync = false, optionalId = false) {\n    const oldInFunc = this.state.inFunction;\n    const oldInMethod = this.state.inMethod;\n    const oldInAsync = this.state.inAsync;\n    const oldInGenerator = this.state.inGenerator;\n    const oldInClassProperty = this.state.inClassProperty;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.inFunction = true;\n    this.state.inMethod = false;\n    this.state.inClassProperty = false;\n    this.state.yieldPos = 0;\n    this.state.awaitPos = 0;\n    this.initFunction(node, isAsync);\n    node.generator = this.eat(types.star);\n\n    if (isStatement && !optionalId && !this.match(types.name)) {\n      this.unexpected();\n    }\n\n    if (!isStatement) {\n      this.state.inAsync = isAsync;\n      this.state.inGenerator = node.generator;\n    }\n\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n    }\n\n    if (isStatement) {\n      this.state.inAsync = isAsync;\n      this.state.inGenerator = node.generator;\n    }\n\n    this.parseFunctionParams(node);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\", allowExpressionBody);\n    });\n    this.state.inFunction = oldInFunc;\n    this.state.inMethod = oldInMethod;\n    this.state.inAsync = oldInAsync;\n    this.state.inGenerator = oldInGenerator;\n    this.state.inClassProperty = oldInClassProperty;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, false, allowModifiers);\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    this.parseClassBody(node);\n    this.state.strict = oldStrict;\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(node) {\n    this.state.classLevel++;\n    const state = {\n      hadConstructor: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.eat(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            this.raise(this.state.lastTokEnd, \"Decorators must not be followed by a semicolon\");\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\");\n        }\n      }\n    });\n\n    if (decorators.length) {\n      this.raise(this.state.start, \"You have trailing decorators with no method\");\n    }\n\n    node.body = this.finishNode(classBody, \"ClassBody\");\n    this.state.classLevel--;\n  }\n\n  parseClassMember(classBody, member, state) {\n    let isStatic = false;\n    const containsEsc = this.state.containsEsc;\n\n    if (this.match(types.name) && this.state.value === \"static\") {\n      const key = this.parseIdentifier(true);\n\n      if (this.isClassMethod()) {\n        const method = member;\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(classBody, method, false, false, false);\n        return;\n      } else if (this.isClassProperty()) {\n        const prop = member;\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return;\n      } else if (containsEsc) {\n        throw this.unexpected();\n      }\n\n      isStatic = true;\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, \"Constructor can't be a generator\");\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false);\n      return;\n    }\n\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    const isSimple = key.type === \"Identifier\";\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (publicMethod.decorators) {\n          this.raise(publicMethod.start, \"You can't attach decorators to a class constructor\");\n        }\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, \"Duplicate constructor in the same class\");\n        }\n\n        state.hadConstructor = true;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, \"Constructor can't be an async function\");\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, \"Constructor can't have get/set modifier\");\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member) {\n    const key = this.parsePropertyName(member);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, \"Classes may not have static property named prototype\");\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, \"Classes may not have a private field named '#constructor'\");\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (this.isNonstaticConstructor(prop)) {\n      this.raise(prop.key.start, \"Classes may not have a non-static field named 'constructor'\");\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    classBody.body.push(this.parseClassPrivateProperty(prop));\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, \"ClassMethod\"));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, false, \"ClassPrivateMethod\"));\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseAccessModifier() {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(node) {\n    const oldInMethod = this.state.inMethod;\n    this.state.inMethod = false;\n    this.state.inClassProperty = true;\n    node.value = this.eat(types.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.state.inClassProperty = false;\n    this.state.inMethod = oldInMethod;\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    const oldInMethod = this.state.inMethod;\n    this.state.inMethod = false;\n    this.state.inClassProperty = true;\n\n    if (this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n\n    this.semicolon();\n    this.state.inClassProperty = false;\n    this.state.inMethod = oldInMethod;\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      this.expectPlugin(\"exportNamespaceFrom\");\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.lookahead();\n\n        if (next.type !== types._function) {\n          this.unexpected(next.start, `Unexpected token, expected \"function\"`);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const {\n      input,\n      pos,\n      length\n    } = this.state;\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(input);\n    if (!skip || !skip.length) return false;\n    const next = pos + skip[0].length;\n    return !lineBreak.test(input.slice(pos, next)) && input.slice(next, next + 8) === \"function\" && (next + 8 === length || !isIdentifierChar(input.charCodeAt(next + 8)));\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.eat(types._function) || isAsync) {\n      if (isAsync) {\n        this.eatContextual(\"async\");\n        this.expect(types._function);\n      }\n\n      return this.parseFunction(expr, true, false, isAsync, true);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.unexpected(this.state.start, \"Decorators must be placed *before* the 'export' keyword.\" + \" You can set the 'decoratorsBeforeExport' option to false to use\" + \" the 'export @decorator class {}' syntax\");\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      return this.raise(this.state.start, \"Only expressions, functions or classes are allowed as the `default` export.\");\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      return this.state.value !== \"async\" && this.state.value !== \"let\";\n    }\n\n    if (!this.match(types._default)) {\n      return false;\n    }\n\n    const lookahead = this.lookahead();\n    return lookahead.type === types.comma || lookahead.type === types.name && lookahead.value === \"from\";\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, \"Decorators must be placed *before* the 'export' keyword.\" + \" You can set the 'decoratorsBeforeExport' option to false to use\" + \" the 'export @decorator class {}' syntax\");\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i2 = 0, _node$specifiers = node.specifiers; _i2 < _node$specifiers.length; _i2++) {\n          const specifier = _node$specifiers[_i2];\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i3 = 0, _node$declaration$dec = node.declaration.declarations; _i3 < _node$declaration$dec.length; _i3++) {\n            const declaration = _node$declaration$dec[_i3];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      const isClass = node.declaration && (node.declaration.type === \"ClassDeclaration\" || node.declaration.type === \"ClassExpression\");\n\n      if (!node.declaration || !isClass) {\n        throw this.raise(node.start, \"You can only use decorators on an export when exporting a class\");\n      }\n\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i4 = 0, _node$properties = node.properties; _i4 < _node$properties.length; _i4++) {\n        const prop = _node$properties[_i4];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i5 = 0, _node$elements = node.elements; _i5 < _node$elements.length; _i5++) {\n        const elem = _node$elements[_i5];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      throw this.raise(node.start, name === \"default\" ? \"Only one default export allowed per module.\" : `\\`${name}\\` has already been exported. Exported identifiers must be unique.`);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    let needsFrom;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const isDefault = this.match(types._default);\n      if (isDefault && !needsFrom) needsFrom = true;\n      const node = this.startNode();\n      node.local = this.parseIdentifier(isDefault);\n      node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    if (needsFrom && !this.isContextual(\"from\")) {\n      this.unexpected();\n    }\n\n    return nodes;\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, true, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          this.unexpected(null, \"ES2015 named imports do not destructure. \" + \"Use another statement for destructuring after the import.\");\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n      specifier.local = specifier.imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, true, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  parse() {\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(file, program);\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = (superClass => class extends superClass {\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsTryParseDelimitedList(kind, parseElement) {\n    return this.tsParseDelimitedListWorker(kind, parseElement, false);\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    while (true) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected(null, \"Argument in a type import must be a string literal\");\n    }\n\n    node.argument = this.parseLiteral(this.state.value, \"StringLiteral\");\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        throw this.unexpected(pattern.start, `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${pattern.type}`);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind) {\n    const node = this.startNode();\n\n    if (kind === \"TSConstructSignatureDeclaration\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.finishNode(id, \"Identifier\");\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    this.parsePropertyName(node);\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\");\n    }\n\n    if (this.match(types._new) && this.tsLookAhead(this.tsIsStartOfConstructSignature.bind(this))) {\n      return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\");\n    }\n\n    const node = this.startNode();\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsIsStartOfConstructSignature() {\n    this.next();\n    return this.match(types.parenL) || this.isRelational(\"<\");\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    node.elementTypes.forEach(elementNode => {\n      if (elementNode.type === \"TSOptionalType\") {\n        seenOptionalElement = true;\n      } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n        this.raise(elementNode.start, \"A required element cannot follow an optional element.\");\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    if (this.match(types.ellipsis)) {\n      const restNode = this.startNode();\n      this.next();\n      restNode.typeAnnotation = this.tsParseType();\n      this.checkCommaAfterRest(types.bracketR, \"type\");\n      return this.finishNode(restNode, \"TSRestType\");\n    }\n\n    const type = this.tsParseType();\n\n    if (this.eat(types.question)) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n          return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n        case types.string:\n          return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n        case types._true:\n        case types._false:\n          return this.parseBooleanLiteral();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookahead().type !== types.dot) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          this.next();\n\n          if (!this.match(types.num)) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseLiteral(-this.state.value, \"NumericLiteral\", node.start, node.loc.start);\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        {\n          const thisKeyword = this.tsParseThisTypeNode();\n\n          if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n            return this.tsParseThisTypePredicate(thisKeyword);\n          } else {\n            return thisKeyword;\n          }\n        }\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types$$1 = [type];\n\n      while (this.eat(operator)) {\n        types$$1.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types$$1;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        return this.tsParseTypeAnnotation(false, t);\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(typePredicateVariable);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n    this.next();\n    node.typeAnnotation = this.tsInType(() => this.tsParseType());\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, `'${descriptor}' list cannot be empty.`);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsExpectThenParseType(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseLiteral(this.state.value, \"StringLiteral\") : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner);\n      node.body = inner;\n    } else {\n      node.body = this.tsParseModuleBlock();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      node.body = this.tsParseModuleBlock();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookahead().type === types.parenL;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseLiteral(this.state.value, \"StringLiteral\");\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const state = this.state.clone();\n\n    try {\n      return f();\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        this.state = state;\n        return undefined;\n      }\n\n      throw e;\n    }\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  nodeWithSamePosition(original, type) {\n    const node = this.startNodeAtNode(original);\n    node.type = type;\n    node.end = original.end;\n    node.loc.end = original.loc.end;\n\n    if (original.leadingComments) {\n      node.leadingComments = original.leadingComments;\n    }\n\n    if (original.trailingComments) {\n      node.trailingComments = original.trailingComments;\n    }\n\n    if (original.innerComments) node.innerComments = original.innerComments;\n    return node;\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._function:\n        this.next();\n        return this.parseFunction(nany, true);\n\n      case types._class:\n        return this.parseClass(nany, true, false);\n\n      case types._const:\n        if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n          this.expect(types._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(nany, true);\n        }\n\n      case types._var:\n        kind = kind || this.state.value;\n        return this.parseVarStatement(nany, kind);\n\n      case types.name:\n        {\n          const value = this.state.value;\n\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, true);\n          }\n        }\n    }\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n\n    if (!res) {\n      return undefined;\n    }\n\n    const oldInAsync = this.state.inAsync;\n    const oldInGenerator = this.state.inGenerator;\n    this.state.inAsync = true;\n    this.state.inGenerator = false;\n    res.id = null;\n    res.generator = false;\n    res.expression = true;\n    res.async = true;\n    this.parseFunctionBody(res, true);\n    this.state.inAsync = oldInAsync;\n    this.state.inGenerator = oldInGenerator;\n    return this.finishNode(res, \"ArrowFunctionExpression\");\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        throw this.raise(pp.start, \"A parameter property may not be declared using a binding pattern.\");\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, allowExpressionBody) {\n    if (!allowExpressionBody && this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, allowExpressionBody);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsync(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node);\n          } else if (this.match(types.backQuote)) {\n            return this.parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments);\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n      node.typeAnnotation = this.tsNextThenParseType();\n      this.finishNode(node, \"TSAsExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) && this.lookahead().type === types.eq) {\n      return this.tsParseImportEqualsDeclaration(node);\n    }\n\n    return super.parseImport(node);\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state) {\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    super.parseClassMember(classBody, member, state);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const methodOrProp = member;\n    const prop = member;\n    const propOrIdx = member;\n    let abstract = false,\n        readonly = false;\n    const mod = this.tsParseModifier([\"abstract\", \"readonly\"]);\n\n    switch (mod) {\n      case \"readonly\":\n        readonly = true;\n        abstract = !!this.tsParseModifier([\"abstract\"]);\n        break;\n\n      case \"abstract\":\n        abstract = true;\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n        break;\n    }\n\n    if (abstract) methodOrProp.abstract = true;\n    if (readonly) propOrIdx.readonly = true;\n\n    if (!abstract && !isStatic && !methodOrProp.accessibility) {\n      const idx = this.tsTryParseIndexSignature(member);\n\n      if (idx) {\n        classBody.body.push(idx);\n        return;\n      }\n    }\n\n    if (readonly) {\n      methodOrProp.static = isStatic;\n      this.parseClassPropertyName(prop);\n      this.parsePostMemberNameModifiers(methodOrProp);\n      this.pushClassProperty(classBody, prop);\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const state = this.state.clone();\n\n    try {\n      return super.parseConditional(expr, noIn, startPos, startLoc);\n    } catch (err) {\n      if (!(err instanceof SyntaxError)) {\n        throw err;\n      }\n\n      this.state = state;\n      refNeedsArrowPos.start = err.pos || this.state.start;\n      return expr;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return this.finishNode(node, node.type);\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(...arguments);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassProperty(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    return super.parseClassProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.finishNode(decl.id, decl.id.type);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    let jsxError;\n\n    if (this.match(types.jsxTagStart)) {\n      const context = this.curContext();\n      assert(context === types$1.j_oTag);\n      assert(this.state.context[this.state.context.length - 2] === types$1.j_expr);\n      const state = this.state.clone();\n\n      try {\n        return super.parseMaybeAssign(...args);\n      } catch (err) {\n        if (!(err instanceof SyntaxError)) {\n          throw err;\n        }\n\n        this.state = state;\n        assert(this.curContext() === types$1.j_oTag);\n        this.state.context.pop();\n        assert(this.curContext() === types$1.j_expr);\n        this.state.context.pop();\n        jsxError = err;\n      }\n    }\n\n    if (jsxError === undefined && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let arrowExpression;\n    let typeParameters;\n    const state = this.state.clone();\n\n    try {\n      typeParameters = this.tsParseTypeParameters();\n      arrowExpression = super.parseMaybeAssign(...args);\n\n      if (arrowExpression.type !== \"ArrowFunctionExpression\") {\n        this.unexpected();\n      }\n    } catch (err) {\n      if (!(err instanceof SyntaxError)) {\n        throw err;\n      }\n\n      if (jsxError) {\n        throw jsxError;\n      }\n\n      assert(!this.hasPlugin(\"jsx\"));\n      this.state = state;\n      return super.parseMaybeAssign(...args);\n    }\n\n    if (typeParameters && typeParameters.params.length !== 0) {\n      this.resetStartLocationFromNode(arrowExpression, typeParameters);\n    }\n\n    arrowExpression.typeParameters = typeParameters;\n    return arrowExpression;\n  }\n\n  parseMaybeUnary(refShorthandDefaultPos) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refShorthandDefaultPos);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const state = this.state.clone();\n\n      try {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types.arrow)) this.unexpected();\n        node.returnType = returnType;\n      } catch (err) {\n        if (err instanceof SyntaxError) {\n          this.state = state;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        throw this.raise(param.start, \"A binding pattern parameter cannot be optional in an implementation signature.\");\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    return this.finishNode(param, param.type);\n  }\n\n  toAssignable(node, isBinding, contextDescription) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isBinding, contextDescription);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isBinding, contextDescription);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isBinding, contextDescription);\n        return node;\n\n      default:\n        return super.toAssignable(node, isBinding, contextDescription);\n    }\n  }\n\n  checkLVal(expr, isBinding, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, isBinding, checkClashes, \"parameter property\");\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, isBinding, checkClashes, contextDescription);\n        return;\n\n      default:\n        super.checkLVal(expr, isBinding, checkClashes, contextDescription);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, \" + \"e.g. instead of `age = 25: number` use `age: number = 25`\");\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  toAssignableList(exprList, isBinding, contextDescription) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TSTypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, isBinding, contextDescription);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    return this.finishNodeAt(node.expression, node.expression.type, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n  }\n\n  toReferencedList(exprList, isInParens) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr._exprListItem && expr.type === \"TsTypeCastExpression\") {\n        this.raise(expr.start, \"Did not expect a type annotation here.\");\n      }\n    }\n\n    return exprList;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n    if (typeArguments) node.typeParameters = typeArguments;\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n}\nconst mixinPluginNames = [\"estree\", \"jsx\", \"flow\", \"typescript\"];\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript\n};\n\nfunction parse(input, options) {\n  if (options && options.sourceType === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n      if (!parser.sawUnambiguousESM) ast.program.sourceType = \"script\";\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (scriptError) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;\n\n\n//# sourceURL=webpack:///./node_modules/@babel/parser/lib/index.js?");

/***/ }),

/***/ "./node_modules/dayjs/dayjs.min.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/dayjs.min.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(t,n){ true?module.exports=n():undefined}(this,function(){\"use strict\";var t=\"millisecond\",n=\"second\",e=\"minute\",i=\"hour\",r=\"day\",s=\"week\",u=\"month\",o=\"year\",a=/^(\\d{4})-?(\\d{1,2})-?(\\d{0,2})[^0-9]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?.?(\\d{1,3})?$/,h=/\\[.*?\\]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,c=function(t,n,e){var i=String(t);return!i||i.length>=n?t:\"\"+Array(n+1-i.length).join(e)+t},f={s:c,z:function(t){var n=-t.utcOffset(),e=Math.abs(n),i=Math.floor(e/60),r=e%60;return(n<=0?\"+\":\"-\")+c(i,2,\"0\")+\":\"+c(r,2,\"0\")},m:function(t,n){var e=12*(n.year()-t.year())+(n.month()-t.month()),i=t.clone().add(e,u),r=n-i<0,s=t.clone().add(e+(r?-1:1),u);return Number(-(e+(n-i)/(r?i-s:s-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(a){return{M:u,y:o,w:s,d:r,h:i,m:e,s:n,ms:t}[a]||String(a||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},d={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\")},$=\"en\",l={};l[$]=d;var m=function(t){return t instanceof S},y=function(t,n,e){var i;if(!t)return null;if(\"string\"==typeof t)l[t]&&(i=t),n&&(l[t]=n,i=t);else{var r=t.name;l[r]=t,i=r}return e||($=i),i},M=function(t,n,e){if(m(t))return t.clone();var i=n?\"string\"==typeof n?{format:n,pl:e}:n:{};return i.date=t,new S(i)},D=f;D.l=y,D.i=m,D.w=function(t,n){return M(t,{locale:n.$L,utc:n.$u})};var S=function(){function c(t){this.$L=this.$L||y(t.locale,null,!0)||$,this.parse(t)}var f=c.prototype;return f.parse=function(t){this.$d=function(t){var n=t.date,e=t.utc;if(null===n)return new Date(NaN);if(D.u(n))return new Date;if(n instanceof Date)return new Date(n);if(\"string\"==typeof n&&!/Z$/i.test(n)){var i=n.match(a);if(i)return e?new Date(Date.UTC(i[1],i[2]-1,i[3]||1,i[4]||0,i[5]||0,i[6]||0,i[7]||0)):new Date(i[1],i[2]-1,i[3]||1,i[4]||0,i[5]||0,i[6]||0,i[7]||0)}return new Date(n)}(t),this.init()},f.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},f.$utils=function(){return D},f.isValid=function(){return!(\"Invalid Date\"===this.$d.toString())},f.isSame=function(t,n){var e=M(t);return this.startOf(n)<=e&&e<=this.endOf(n)},f.isAfter=function(t,n){return M(t)<this.startOf(n)},f.isBefore=function(t,n){return this.endOf(n)<M(t)},f.year=function(){return this.$y},f.month=function(){return this.$M},f.day=function(){return this.$W},f.date=function(){return this.$D},f.hour=function(){return this.$H},f.minute=function(){return this.$m},f.second=function(){return this.$s},f.millisecond=function(){return this.$ms},f.unix=function(){return Math.floor(this.valueOf()/1e3)},f.valueOf=function(){return this.$d.getTime()},f.startOf=function(t,a){var h=this,c=!!D.u(a)||a,f=D.p(t),d=function(t,n){var e=D.w(h.$u?Date.UTC(h.$y,n,t):new Date(h.$y,n,t),h);return c?e:e.endOf(r)},$=function(t,n){return D.w(h.toDate()[t].apply(h.toDate(),(c?[0,0,0,0]:[23,59,59,999]).slice(n)),h)},l=this.$W,m=this.$M,y=this.$D,M=\"set\"+(this.$u?\"UTC\":\"\");switch(f){case o:return c?d(1,0):d(31,11);case u:return c?d(1,m):d(0,m+1);case s:var S=this.$locale().weekStart||0,g=(l<S?l+7:l)-S;return d(c?y-g:y+(6-g),m);case r:case\"date\":return $(M+\"Hours\",0);case i:return $(M+\"Minutes\",1);case e:return $(M+\"Seconds\",2);case n:return $(M+\"Milliseconds\",3);default:return this.clone()}},f.endOf=function(t){return this.startOf(t,!1)},f.$set=function(s,a){var h,c=D.p(s),f=\"set\"+(this.$u?\"UTC\":\"\"),d=(h={},h[r]=f+\"Date\",h.date=f+\"Date\",h[u]=f+\"Month\",h[o]=f+\"FullYear\",h[i]=f+\"Hours\",h[e]=f+\"Minutes\",h[n]=f+\"Seconds\",h[t]=f+\"Milliseconds\",h)[c],$=c===r?this.$D+(a-this.$W):a;return this.$d[d]&&this.$d[d]($),this.init(),this},f.set=function(t,n){return this.clone().$set(t,n)},f.add=function(t,a){var h,c=this;t=Number(t);var f=D.p(a),d=function(n,e){var i=c.set(\"date\",1).set(n,e+t);return i.set(\"date\",Math.min(c.$D,i.daysInMonth()))},$=function(n){var e=new Date(c.$d);return e.setDate(e.getDate()+n*t),D.w(e,c)};if(f===u)return d(u,this.$M);if(f===o)return d(o,this.$y);if(f===r)return $(1);if(f===s)return $(7);var l=(h={},h[e]=6e4,h[i]=36e5,h[n]=1e3,h)[f]||1,m=this.valueOf()+t*l;return D.w(m,this)},f.subtract=function(t,n){return this.add(-1*t,n)},f.format=function(t){var n=this;if(!this.isValid())return\"Invalid Date\";var e=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=D.z(this),r=this.$locale(),s=r.weekdays,u=r.months,o=function(t,n,e,i){return t&&t[n]||e[n].substr(0,i)},a=function(t){return D.s(n.$H%12||12,t,\"0\")},c={YY:String(this.$y).slice(-2),YYYY:String(this.$y),M:String(this.$M+1),MM:D.s(this.$M+1,2,\"0\"),MMM:o(r.monthsShort,this.$M,u,3),MMMM:u[this.$M],D:String(this.$D),DD:D.s(this.$D,2,\"0\"),d:String(this.$W),dd:o(r.weekdaysMin,this.$W,s,2),ddd:o(r.weekdaysShort,this.$W,s,3),dddd:s[this.$W],H:String(this.$H),HH:D.s(this.$H,2,\"0\"),h:a(1),hh:a(2),a:this.$H<12?\"am\":\"pm\",A:this.$H<12?\"AM\":\"PM\",m:String(this.$m),mm:D.s(this.$m,2,\"0\"),s:String(this.$s),ss:D.s(this.$s,2,\"0\"),SSS:D.s(this.$ms,3,\"0\"),Z:i};return e.replace(h,function(t){return t.indexOf(\"[\")>-1?t.replace(/\\[|\\]/g,\"\"):c[t]||i.replace(\":\",\"\")})},f.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},f.diff=function(t,a,h){var c,f=D.p(a),d=M(t),$=6e4*(d.utcOffset()-this.utcOffset()),l=this-d,m=D.m(this,d);return m=(c={},c[o]=m/12,c[u]=m,c.quarter=m/3,c[s]=(l-$)/6048e5,c[r]=(l-$)/864e5,c[i]=l/36e5,c[e]=l/6e4,c[n]=l/1e3,c)[f]||l,h?m:D.a(m)},f.daysInMonth=function(){return this.endOf(u).$D},f.$locale=function(){return l[this.$L]},f.locale=function(t,n){var e=this.clone();return e.$L=y(t,n,!0),e},f.clone=function(){return D.w(this.toDate(),this)},f.toDate=function(){return new Date(this.$d)},f.toArray=function(){return[this.$y,this.$M,this.$D,this.$H,this.$m,this.$s,this.$ms]},f.toJSON=function(){return this.toISOString()},f.toISOString=function(){return this.$d.toISOString()},f.toObject=function(){return{years:this.$y,months:this.$M,date:this.$D,hours:this.$H,minutes:this.$m,seconds:this.$s,milliseconds:this.$ms}},f.toString=function(){return this.$d.toUTCString()},c}();return M.prototype=S.prototype,M.extend=function(t,n){return t(n,S,M),M},M.locale=y,M.isDayjs=m,M.unix=function(t){return M(1e3*t)},M.en=l[$],M.Ls=l,M});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/dayjs.min.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale sync recursive ^\\.\\/.*$":
/*!*************************************************!*\
  !*** ./node_modules/dayjs/locale sync ^\.\/.*$ ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./ar\": \"./node_modules/dayjs/locale/ar.js\",\n\t\"./ar.js\": \"./node_modules/dayjs/locale/ar.js\",\n\t\"./bg\": \"./node_modules/dayjs/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/dayjs/locale/bg.js\",\n\t\"./ca\": \"./node_modules/dayjs/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/dayjs/locale/ca.js\",\n\t\"./cs\": \"./node_modules/dayjs/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/dayjs/locale/cs.js\",\n\t\"./da\": \"./node_modules/dayjs/locale/da.js\",\n\t\"./da.js\": \"./node_modules/dayjs/locale/da.js\",\n\t\"./de\": \"./node_modules/dayjs/locale/de.js\",\n\t\"./de-at\": \"./node_modules/dayjs/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/dayjs/locale/de-at.js\",\n\t\"./de.js\": \"./node_modules/dayjs/locale/de.js\",\n\t\"./el\": \"./node_modules/dayjs/locale/el.js\",\n\t\"./el.js\": \"./node_modules/dayjs/locale/el.js\",\n\t\"./en\": \"./node_modules/dayjs/locale/en.js\",\n\t\"./en-gb\": \"./node_modules/dayjs/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/dayjs/locale/en-gb.js\",\n\t\"./en.js\": \"./node_modules/dayjs/locale/en.js\",\n\t\"./es\": \"./node_modules/dayjs/locale/es.js\",\n\t\"./es-do\": \"./node_modules/dayjs/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/dayjs/locale/es-do.js\",\n\t\"./es-us\": \"./node_modules/dayjs/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/dayjs/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/dayjs/locale/es.js\",\n\t\"./et\": \"./node_modules/dayjs/locale/et.js\",\n\t\"./et.js\": \"./node_modules/dayjs/locale/et.js\",\n\t\"./fa\": \"./node_modules/dayjs/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/dayjs/locale/fa.js\",\n\t\"./fi\": \"./node_modules/dayjs/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/dayjs/locale/fi.js\",\n\t\"./fr\": \"./node_modules/dayjs/locale/fr.js\",\n\t\"./fr.js\": \"./node_modules/dayjs/locale/fr.js\",\n\t\"./he\": \"./node_modules/dayjs/locale/he.js\",\n\t\"./he.js\": \"./node_modules/dayjs/locale/he.js\",\n\t\"./hr\": \"./node_modules/dayjs/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/dayjs/locale/hr.js\",\n\t\"./hu\": \"./node_modules/dayjs/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/dayjs/locale/hu.js\",\n\t\"./id\": \"./node_modules/dayjs/locale/id.js\",\n\t\"./id.js\": \"./node_modules/dayjs/locale/id.js\",\n\t\"./it\": \"./node_modules/dayjs/locale/it.js\",\n\t\"./it.js\": \"./node_modules/dayjs/locale/it.js\",\n\t\"./ja\": \"./node_modules/dayjs/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/dayjs/locale/ja.js\",\n\t\"./ka\": \"./node_modules/dayjs/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/dayjs/locale/ka.js\",\n\t\"./kk\": \"./node_modules/dayjs/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/dayjs/locale/kk.js\",\n\t\"./ko\": \"./node_modules/dayjs/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/dayjs/locale/ko.js\",\n\t\"./lt\": \"./node_modules/dayjs/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/dayjs/locale/lt.js\",\n\t\"./ms\": \"./node_modules/dayjs/locale/ms.js\",\n\t\"./ms.js\": \"./node_modules/dayjs/locale/ms.js\",\n\t\"./nb\": \"./node_modules/dayjs/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/dayjs/locale/nb.js\",\n\t\"./nl\": \"./node_modules/dayjs/locale/nl.js\",\n\t\"./nl.js\": \"./node_modules/dayjs/locale/nl.js\",\n\t\"./nn\": \"./node_modules/dayjs/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/dayjs/locale/nn.js\",\n\t\"./pl\": \"./node_modules/dayjs/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/dayjs/locale/pl.js\",\n\t\"./pt\": \"./node_modules/dayjs/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/dayjs/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/dayjs/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/dayjs/locale/pt.js\",\n\t\"./ro\": \"./node_modules/dayjs/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/dayjs/locale/ro.js\",\n\t\"./ru\": \"./node_modules/dayjs/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/dayjs/locale/ru.js\",\n\t\"./sk\": \"./node_modules/dayjs/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/dayjs/locale/sk.js\",\n\t\"./sr\": \"./node_modules/dayjs/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/dayjs/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/dayjs/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/dayjs/locale/sr.js\",\n\t\"./sv\": \"./node_modules/dayjs/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/dayjs/locale/sv.js\",\n\t\"./sw\": \"./node_modules/dayjs/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/dayjs/locale/sw.js\",\n\t\"./th\": \"./node_modules/dayjs/locale/th.js\",\n\t\"./th.js\": \"./node_modules/dayjs/locale/th.js\",\n\t\"./tr\": \"./node_modules/dayjs/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/dayjs/locale/tr.js\",\n\t\"./uk\": \"./node_modules/dayjs/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/dayjs/locale/uk.js\",\n\t\"./zh-cn\": \"./node_modules/dayjs/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/dayjs/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/dayjs/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/dayjs/locale/zh-hk.js\",\n\t\"./zh-tw\": \"./node_modules/dayjs/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/dayjs/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/dayjs/locale sync recursive ^\\\\.\\\\/.*$\";\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale_sync_^\\.\\/.*$?");

/***/ }),

/***/ "./node_modules/dayjs/locale/ar.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/ar.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var t={name:\"ar\",weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),months:\"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),weekStart:6,relativeTime:{future:\"بعد %s\",past:\"منذ %s\",s:\"ثانية واحدة\",m:\"دقيقة واحدة\",mm:\"دقائق %d\",h:\"ساعة واحدة\",hh:\"ساعات %d\",d:\"يوم واحد\",dd:\"أيام %d\",M:\"شهر واحد\",MM:\"شهرا %d\",y:\"عام واحد\",yy:\"أعوام %d\"},ordinal:function(e){return e}};return e.locale(t,null,!0),t});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/ar.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/bg.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/bg.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var t={name:\"bg\",weekdays:\"Неделя_Понеделник_Вторник_Сряда_Четвъртък_Петък_Събота\".split(\"_\"),months:\"Януари_Февруари_Март_Април_Май_Юни_Юли_Август_Септември_Октомври_Ноември_Декември\".split(\"_\"),weekStart:1,ordinal:function(e){return e+\".\"},formats:{LT:\"H:mm\",LTS:\"H:mm:ss\",L:\"D.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY H:mm\",LLLL:\"dddd, D MMMM YYYY H:mm\"}};return e.locale(t,null,!0),t});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/bg.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/ca.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/ca.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,s){ true?module.exports=s(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var s={name:\"ca\",weekdays:\"Diumenge_Dilluns_Dimarts_Dimecres_Dijous_Divendres_Dissabte\".split(\"_\"),months:\"Gener_Febrer_Març_Abril_Maig_Juny_Juliol_Agost_Setembre_Octubre_Novembre_Desembre\".split(\"_\"),weekStart:1,formats:{LT:\"H:mm\",LTS:\"H:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM [de] YYYY\",LLL:\"D MMMM [de] YYYY [a les] H:mm\",LLLL:\"dddd D MMMM [de] YYYY [a les] H:mm\"},relativeTime:{future:\"en %s\",past:\"fa %s\",s:\"uns segons\",m:\"un minut\",mm:\"%d minuts\",h:\"una hora\",hh:\"%d hores\",d:\"un dia\",dd:\"%d dies\",M:\"un mes\",MM:\"%d mesos\",y:\"un any\",yy:\"%d anys\"},ordinal:function(e){return e+\"º\"}};return e.locale(s,null,!0),s});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/ca.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/cs.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/cs.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,d){ true?module.exports=d(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var d={name:\"cs\",weekdays:\"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota\".split(\"_\"),months:\"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec\".split(\"_\"),weekStart:1,ordinal:function(e){return e+\".\"},formats:{LT:\"H:mm\",LTS:\"H:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY H:mm\",LLLL:\"dddd D. MMMM YYYY H:mm\"},relativeTime:{future:\"za %s\",past:\"před %s\",s:\"několik sekund\",m:\"minuta\",mm:\"%d minut\",h:\"hodina\",hh:\"%d hodin\",d:\"den\",dd:\"%d dnů\",M:\"měsíc\",MM:\"%d měsíců\",y:\"rok\",yy:\"%d roků\"}};return e.locale(d,null,!0),d});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/cs.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/da.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/da.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,d){ true?module.exports=d(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var d={name:\"da\",weekdays:\"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag\".split(\"_\"),months:\"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december\".split(\"_\"),weekStart:1,ordinal:function(e){return e+\".\"},formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY HH:mm\",LLLL:\"dddd [d.] D. MMMM YYYY [kl.] HH:mm\"},relativeTime:{future:\"om %s\",past:\"%s siden\",s:\"få sekunder\",m:\"et minut\",mm:\"%d minutter\",h:\"en time\",hh:\"%d timer\",d:\"en dag\",dd:\"%d dage\",M:\"en måned\",MM:\"%d måneder\",y:\"et år\",yy:\"%d år\"}};return e.locale(d,null,!0),d});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/da.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/de-at.js":
/*!********************************************!*\
  !*** ./node_modules/dayjs/locale/de-at.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,n){ true?module.exports=n(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var n={name:\"de-at\",weekdays:\"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag\".split(\"_\"),months:\"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember\".split(\"_\"),monthsShort:\"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.\".split(\"_\"),ordinal:function(e){return e+\".\"},weekStart:1,formats:{LTS:\"HH:mm:ss\",LT:\"HH:mm\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY HH:mm\",LLLL:\"dddd, D. MMMM YYYY HH:mm\"},relativeTime:{future:\"in %s\",past:\"vor %s\",s:\"ein paar Sekunden\",m:\"einer Minute\",mm:\"%d Minuten\",h:\"einer Stunde\",hh:\"%d Stunden\",d:\"einem Tag\",dd:\"%d Tagen\",M:\"einem Monat\",MM:\"%d Monaten\",y:\"einem Jahr\",yy:\"%d Jahren\"}};return e.locale(n,null,!0),n});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/de-at.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/de.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/de.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,n){ true?module.exports=n(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var n={name:\"de\",weekdays:\"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag\".split(\"_\"),months:\"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember\".split(\"_\"),monthsShort:\"Jan_Feb_März_Apr_Mai_Juni_Juli_Aug_Sept_Okt_Nov_Dez\".split(\"_\"),ordinal:function(e){return e+\".\"},weekStart:1,formats:{LTS:\"HH:mm:ss\",LT:\"HH:mm\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY HH:mm\",LLLL:\"dddd, D. MMMM YYYY HH:mm\"},relativeTime:{future:\"in %s\",past:\"vor %s\",s:\"wenigen Sekunden\",m:\"einer Minute\",mm:\"%d Minuten\",h:\"einer Stunde\",hh:\"%d Stunden\",d:\"einem Tag\",dd:\"%d Tagen\",M:\"einem Monat\",MM:\"%d Monaten\",y:\"einem Jahr\",yy:\"%d Jahren\"}};return e.locale(n,null,!0),n});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/de.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/el.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/el.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,_){ true?module.exports=_(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var _={name:\"el\",weekdays:\"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο\".split(\"_\"),months:\"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος\".split(\"_\"),monthsShort:\"Ιαν_Φεβ_Μαρ_Απρ_Μαι_Ιουν_Ιουλ_Αυγ_Σεπτ_Οκτ_Νοε_Δεκ\".split(\"_\"),ordinal:function(e){return e},weekStart:1,relativeTime:{future:\"σε %s\",past:\"πριν %s\",s:\"μερικά δευτερόλεπτα\",m:\"ένα λεπτό\",mm:\"%d λεπτά\",h:\"μία ώρα\",hh:\"%d ώρες\",d:\"μία μέρα\",dd:\"%d μέρες\",M:\"ένα μήνα\",MM:\"%d μήνες\",y:\"ένα χρόνο\",yy:\"%d χρόνια\"}};return e.locale(_,null,!0),_});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/el.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/en-gb.js":
/*!********************************************!*\
  !*** ./node_modules/dayjs/locale/en-gb.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,a){ true?module.exports=a(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var a={name:\"en-gb\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekStart:1,relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY HH:mm\",LLLL:\"dddd, D MMMM YYYY HH:mm\"},ordinal:function(e){var a=[\"th\",\"st\",\"nd\",\"rd\"],_=e%100;return\"[\"+e+(a[(_-20)%10]||a[_]||a[0])+\"]\"}};return e.locale(a,null,!0),a});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/en-gb.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/en.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/en.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,n){ true?module.exports=n():undefined}(this,function(){\"use strict\";return{name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\")}});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/en.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/es-do.js":
/*!********************************************!*\
  !*** ./node_modules/dayjs/locale/es-do.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,o){ true?module.exports=o(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var o={name:\"es-do\",weekdays:\"domingo_lunes_martes_miércoles_jueves_viernes_sábado\".split(\"_\"),weekdaysShort:\"dom._lun._mar._mié._jue._vie._sáb.\".split(\"_\"),weekdaysMin:\"do_lu_ma_mi_ju_vi_sá\".split(\"_\"),months:\"Enero_Febrero_Marzo_Abril_Mayo_Junio_Julio_Agosto_Septiembre_Octubre_Noviembre_Diciembre\".split(\"_\"),monthsShort:\"ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic\".split(\"_\"),weekStart:1,relativeTime:{future:\"en %s\",past:\"hace %s\",s:\"unos segundos\",m:\"un minuto\",mm:\"%d minutos\",h:\"una hora\",hh:\"%d horas\",d:\"un día\",dd:\"%d días\",M:\"un mes\",MM:\"%d meses\",y:\"un año\",yy:\"%d años\"},ordinal:function(e){return e+\"º\"}};return e.locale(o,null,!0),o});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/es-do.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/es-us.js":
/*!********************************************!*\
  !*** ./node_modules/dayjs/locale/es-us.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,s){ true?module.exports=s(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var s={name:\"es-us\",weekdays:\"domingo_lunes_martes_miércoles_jueves_viernes_sábado\".split(\"_\"),weekdaysShort:\"dom._lun._mar._mié._jue._vie._sáb.\".split(\"_\"),weekdaysMin:\"do_lu_ma_mi_ju_vi_sá\".split(\"_\"),months:\"Enero_Febrero_Marzo_Abril_Mayo_Junio_Julio_Agosto_Septiembre_Octubre_Noviembre_Diciembre\".split(\"_\"),monthsShort:\"ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic\".split(\"_\"),relativeTime:{future:\"en %s\",past:\"hace %s\",s:\"unos segundos\",m:\"un minuto\",mm:\"%d minutos\",h:\"una hora\",hh:\"%d horas\",d:\"un día\",dd:\"%d días\",M:\"un mes\",MM:\"%d meses\",y:\"un año\",yy:\"%d años\"},ordinal:function(e){return e+\"º\"}};return e.locale(s,null,!0),s});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/es-us.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/es.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/es.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,s){ true?module.exports=s(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var s={name:\"es\",monthsShort:\"ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic\".split(\"_\"),weekdays:\"domingo_lunes_martes_miércoles_jueves_viernes_sábado\".split(\"_\"),weekdaysShort:\"dom._lun._mar._mié._jue._vie._sáb.\".split(\"_\"),weekdaysMin:\"do_lu_ma_mi_ju_vi_sá\".split(\"_\"),months:\"Enero_Febrero_Marzo_Abril_Mayo_Junio_Julio_Agosto_Septiembre_Octubre_Noviembre_Diciembre\".split(\"_\"),weekStart:1,formats:{LT:\"H:mm\",LTS:\"H:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY H:mm\",LLLL:\"dddd, D [de] MMMM [de] YYYY H:mm\"},relativeTime:{future:\"en %s\",past:\"hace %s\",s:\"unos segundos\",m:\"un minuto\",mm:\"%d minutos\",h:\"una hora\",hh:\"%d horas\",d:\"un día\",dd:\"%d días\",M:\"un mes\",MM:\"%d meses\",y:\"un año\",yy:\"%d años\"},ordinal:function(e){return e+\"º\"}};return e.locale(s,null,!0),s});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/es.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/et.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/et.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var t={name:\"et\",weekdays:\"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev\".split(\"_\"),weekdaysShort:\"P_E_T_K_N_R_L\".split(\"_\"),weekdaysMin:\"P_E_T_K_N_R_L\".split(\"_\"),months:\"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember\".split(\"_\"),monthsShort:\"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets\".split(\"_\"),ordinal:function(e){return e+\".\"},weekStart:1,relativeTime:{future:\"%s pärast\",past:\"%s tagasi\",s:\"mõni sekund\",m:\"minut\",mm:\"%d minutit\",h:\"tund\",hh:\"%d tundi\",d:\"päev\",dd:\"%d päeva\",M:\"kuu\",MM:\"%d kuud\",y:\"aasta\",yy:\"%d aastat\"}};return e.locale(t,null,!0),t});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/et.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/fa.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/fa.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,d){ true?module.exports=d(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var d={name:\"fa\",weekdays:\"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\"),months:\"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\".split(\"_\"),ordinal:function(e){return e},formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY HH:mm\",LLLL:\"dddd, D MMMM YYYY HH:mm\"},relativeTime:{future:\"در %s\",past:\"%s پیش\",s:\"چند ثانیه\",m:\"یک دقیقه\",mm:\"%d دقیقه\",h:\"یک ساعت\",hh:\"%d ساعت\",d:\"یک روز\",dd:\"%d روز\",M:\"یک ماه\",MM:\"%d ماه\",y:\"یک سال\",yy:\"%d سال\"}};return e.locale(d,null,!0),d});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/fa.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/fi.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/fi.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(u,t){ true?module.exports=t(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(u){\"use strict\";u=u&&u.hasOwnProperty(\"default\")?u.default:u;var t={name:\"fi\",weekdays:\"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai\".split(\"_\"),weekdaysShort:\"su_ma_ti_ke_to_pe_la\".split(\"_\"),weekdaysMin:\"su_ma_ti_ke_to_pe_la\".split(\"_\"),months:\"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu\".split(\"_\"),monthsShort:\"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu\".split(\"_\"),ordinal:function(u){return u+\".\"},weekStart:1,relativeTime:{future:\"%s kuluttua\",past:\"%s sitten\",s:\"muutama sekunti\",m:\"minuutti\",mm:\"%d minuuttia\",h:\"tunti\",hh:\"%d tuntia\",d:\"päivä\",dd:\"%d päivää\",M:\"kuukausi\",MM:\"%d kuukautta\",y:\"vuosi\",yy:\"%d vuotta\"}};return u.locale(t,null,!0),t});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/fi.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/fr.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/fr.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,r){ true?module.exports=r(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var r={name:\"fr\",weekdays:\"Dimanche_Lundi_Mardi_Mercredi_Jeudi_Vendredi_Samedi\".split(\"_\"),months:\"Janvier_Février_Mars_Avril_Mai_Juin_Juillet_Août_Septembre_Octobre_Novembre_Décembre\".split(\"_\"),monthsShort:\"janv_févr_mars_avril_mai_juin_juil_août_sept_oct_nov_déc\".split(\"_\"),weekStart:1,formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY HH:mm\",LLLL:\"dddd D MMMM YYYY HH:mm\"},relativeTime:{future:\"dans %s\",past:\"il y a %s\",s:\"quelques secondes\",m:\"une minute\",mm:\"%d minutes\",h:\"une heure\",hh:\"%d heures\",d:\"un jour\",dd:\"%d jours\",M:\"un mois\",MM:\"%d mois\",y:\"un an\",yy:\"%d ans\"},ordinal:function(e){return\"\"+e+(1===e?\"er\":\"\")}};return e.locale(r,null,!0),r});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/fr.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/he.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/he.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(_,e){ true?module.exports=e(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(_){\"use strict\";_=_&&_.hasOwnProperty(\"default\")?_.default:_;var e={name:\"he\",weekdays:\"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת\".split(\"_\"),weekdaysMin:\"א׳_ב׳_ג׳_ד׳_ה׳_ו_ש׳\".split(\"_\"),months:\"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר\".split(\"_\"),monthsShort:\"ינו_פבר_מרץ_אפר_מאי_יונ_יול_אוג_ספט_אוק_נוב_דצמ\".split(\"_\"),relativeTime:{future:\"בעוד %s\",past:\"לפני %s\",s:\"כמה שניות\",m:\"דקה\",mm:\"%d דקות\",h:\"שעה\",hh:\"%d שעות\",d:\"יום\",dd:\"%d ימים\",M:\"חודש\",MM:\"%d חודשים\",y:\"שנה\",yy:\"%d שנים\"},ordinal:function(_){return _}};return _.locale(e,null,!0),e});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/he.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/hr.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/hr.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,a){ true?module.exports=a(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var a={name:\"hr\",weekdays:\"Nedjelja_Ponedjeljak_Utorak_Srijeda_Četvrtak_Petak_Subota\".split(\"_\"),months:\"Siječanj_Veljača_Ožujak_Travanj_Svibanj_Lipanj_Srpanj_Kolovoz_Rujan_Listopad_Studeni_Prosinac\".split(\"_\"),weekStart:1,formats:{LT:\"H:mm\",LTS:\"H:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY H:mm\",LLLL:\"dddd, D. MMMM YYYY H:mm\"},relativeTime:{future:\"za %s\",past:\"prije %s\",s:\"sekunda\",m:\"minuta\",mm:\"%d minuta\",h:\"sat\",hh:\"%d sati\",d:\"dan\",dd:\"%d dana\",M:\"mjesec\",MM:\"%d mjeseci\",y:\"godina\",yy:\"%d godine\"},ordinal:function(e){return e+\".\"}};return e.locale(a,null,!0),a});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/hr.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/hu.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/hu.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,_){ true?module.exports=_(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var _={name:\"hu\",weekdays:\"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat\".split(\"_\"),weekdaysShort:\"vas_hét_kedd_sze_csüt_pén_szo\".split(\"_\"),weekdaysMin:\"v_h_k_sze_cs_p_szo\".split(\"_\"),months:\"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december\".split(\"_\"),monthsShort:\"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec\".split(\"_\"),ordinal:function(e){return e+\".\"},weekStart:1,relativeTime:{future:\"%s múlva\",past:\"%s\",s:\"néhány másodperc\",m:\"egy perc\",mm:\"%d perc\",h:\"egy óra\",hh:\"%d óra\",d:\"egy nap\",dd:\"%d nap\",M:\"egy hónap\",MM:\"%d hónap\",y:\"egy éve\",yy:\"%d év\"}};return e.locale(_,null,!0),_});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/hu.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/id.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/id.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,a){ true?module.exports=a(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var a={name:\"id\",weekdays:\"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu\".split(\"_\"),months:\"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember\".split(\"_\"),weekStart:1,formats:{LT:\"HH.mm\",LTS:\"HH.mm.ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY [pukul] HH.mm\",LLLL:\"dddd, D MMMM YYYY [pukul] HH.mm\"},relativeTime:{future:\"dalam %s\",past:\"%s yang lalu\",s:\"beberapa detik\",m:\"semenit\",mm:\"%d menit\",h:\"sejam\",hh:\"%d jam\",d:\"sehari\",dd:\"%d hari\",M:\"sebulan\",MM:\"%d bulan\",y:\"setahun\",yy:\"%d tahun\"},ordinal:function(e){return e+\".\"}};return e.locale(a,null,!0),a});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/id.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/it.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/it.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,o){ true?module.exports=o(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var o={name:\"it\",weekdays:\"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato\".split(\"_\"),weekdaysShort:\"dom_lun_mar_mer_gio_ven_sab\".split(\"_\"),weekdaysMin:\"do_lu_ma_me_gi_ve_sa\".split(\"_\"),months:\"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre\".split(\"_\"),weekStart:1,monthsShort:\"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic\".split(\"_\"),formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY HH:mm\",LLLL:\"dddd D MMMM YYYY HH:mm\"},relativeTime:{future:\"tra %s\",past:\"da %s\",s:\"qualche secondo\",m:\"un minuto\",mm:\"%d minuti\",h:\"un' ora\",hh:\"%d ore\",d:\"un giorno\",dd:\"%d giorni\",M:\"un mese\",MM:\"%d mesi\",y:\"un anno\",yy:\"%d anni\"},ordinal:function(e){return e+\"º\"}};return e.locale(o,null,!0),o});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/it.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/ja.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/ja.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,_){ true?module.exports=_(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var _={name:\"ja\",weekdays:\"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日\".split(\"_\"),weekdaysShort:\"日_月_火_水_木_金_土\".split(\"_\"),weekdaysMin:\"日_月_火_水_木_金_土\".split(\"_\"),months:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),ordinal:function(e){return e+\"日\"},formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"YYYY/MM/DD\",LL:\"YYYY年M月D日\",LLL:\"YYYY年M月D日 HH:mm\",LLLL:\"YYYY年M月D日 dddd HH:mm\"},relativeTime:{future:\"%s後\",past:\"%s前\",s:\"数秒\",m:\"1分\",mm:\"%d分\",h:\"1時間\",hh:\"%d時間\",d:\"1日\",dd:\"%d日\",M:\"1ヶ月\",MM:\"%dヶ月\",y:\"1年\",yy:\"%d年\"}};return e.locale(_,null,!0),_});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/ja.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/ka.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/ka.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,d){ true?module.exports=d(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var d={name:\"ka\",weekdays:\"კვირა_ორშაბათი_სამშაბათი_გარემო_ხუთშაბათი_პარასკევი_შაბათს\".split(\"_\"),months:\"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი\".split(\"_\"),weekStart:1,formats:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY h:mm A\",LLLL:\"dddd, D MMMM YYYY h:mm A\"},relativeTime:{future:\"%s შემდეგ\",past:\"%s წინ\",s:\"წამი\",m:\"წუთი\",mm:\"%d წუთი\",h:\"საათი\",hh:\"%d საათის\",d:\"დღეს\",dd:\"%d დღის განმავლობაში\",M:\"თვის\",MM:\"%d თვის\",y:\"წელი\",yy:\"%d წლის\"},ordinal:function(e){return e}};return e.locale(d,null,!0),d});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/ka.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/kk.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/kk.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(_,e){ true?module.exports=e(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(_){\"use strict\";_=_&&_.hasOwnProperty(\"default\")?_.default:_;var e={name:\"kk\",weekdays:\"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі\".split(\"_\"),weekdaysShort:\"жек_дүй_сей_сәр_бей_жұм_сен\".split(\"_\"),weekdaysMin:\"жк_дй_сй_ср_бй_жм_сн\".split(\"_\"),months:\"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан\".split(\"_\"),monthsShort:\"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел\".split(\"_\"),weekStart:1,relativeTime:{future:\"%s ішінде\",past:\"%s бұрын\",s:\"бірнеше секунд\",m:\"бір минут\",mm:\"%d минут\",h:\"бір сағат\",hh:\"%d сағат\",d:\"бір күн\",dd:\"%d күн\",M:\"бір ай\",MM:\"%d ай\",y:\"бір жыл\",yy:\"%d жыл\"},ordinal:function(_){return _}};return _.locale(e,null,!0),e});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/kk.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/ko.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/ko.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,d){ true?module.exports=d(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var d={name:\"ko\",weekdays:\"일요일_월요일_화요일_수요일_목요일_금요일_토요일\".split(\"_\"),months:\"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월\".split(\"_\"),ordinal:function(e){return e},formats:{LT:\"A h:mm\",LTS:\"A h:mm:ss\",L:\"YYYY.MM.DD.\",LL:\"YYYY년 MMMM D일\",LLL:\"YYYY년 MMMM D일 A h:mm\",LLLL:\"YYYY년 MMMM D일 dddd A h:mm\"},relativeTime:{future:\"%s 후\",past:\"%s 전\",s:\"몇 초\",m:\"1분\",mm:\"%d분\",h:\"한 시간\",hh:\"%d시간\",d:\"하루\",dd:\"%d일\",M:\"한 달\",MM:\"%d달\",y:\"일 년\",yy:\"%d년\"}};return e.locale(d,null,!0),d});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/ko.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/lt.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/lt.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,i){ true?module.exports=i(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var i={name:\"lt\",weekdays:\"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis\".split(\"_\"),months:\"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis\".split(\"_\"),ordinal:function(e){return e+\".\"},weekStart:1,relativeTime:{future:\"už %s\",past:\"prieš %s\",s:\"kelias sekundes\",m:\"minutę\",mm:\"%d minutes\",h:\"valandą\",hh:\"%d valandas\",d:\"dieną\",dd:\"%d dienas\",M:\"menesį\",MM:\"%d mėnesius\",y:\"metus\",yy:\"%d metus\"}};return e.locale(i,null,!0),i});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/lt.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/ms.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/ms.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,a){ true?module.exports=a(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var a={name:\"ms\",weekdays:\"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu\".split(\"_\"),months:\"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember\".split(\"_\"),weekStart:1,formats:{LT:\"HH.mm\",LTS:\"HH.mm.ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY HH.mm\",LLLL:\"dddd, D MMMM YYYY HH.mm\"},relativeTime:{future:\"dalam %s\",past:\"%s yang lepas\",s:\"beberapa saat\",m:\"seminit\",mm:\"%d minit\",h:\"sejam\",hh:\"%d jam\",d:\"sehari\",dd:\"%d hari\",M:\"sebulan\",MM:\"%d bulan\",y:\"setahun\",yy:\"%d tahun\"},ordinal:function(e){return e+\".\"}};return e.locale(a,null,!0),a});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/ms.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/nb.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/nb.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,d){ true?module.exports=d(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var d={name:\"nb\",weekdays:\"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag\".split(\"_\"),months:\"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember\".split(\"_\"),ordinal:function(e){return e+\".\"},weekStart:1,formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY [kl.] HH:mm\",LLLL:\"dddd D. MMMM YYYY [kl.] HH:mm\"},relativeTime:{future:\"om %s\",past:\"for %s siden\",s:\"noen sekunder\",m:\"ett minutt\",mm:\"%d minutter\",h:\"en time\",hh:\"%d timer\",d:\"en dag\",dd:\"%d dager\",M:\"en måned\",MM:\"%d måneder\",y:\"ett år\",yy:\"%d år\"}};return e.locale(d,null,!0),d});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/nb.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/nl.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/nl.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,a){ true?module.exports=a(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var a={name:\"nl\",weekdays:\"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag\".split(\"_\"),months:\"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december\".split(\"_\"),ordinal:function(e){return e+\".\"},weekStart:1,formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD-MM-YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY HH:mm\",LLLL:\"dddd D MMMM YYYY HH:mm\"},relativeTime:{future:\"over %s\",past:\"%s geleden\",s:\"een paar seconden\",m:\"een minuut\",mm:\"%d minuten\",h:\"een uur\",hh:\"%d uur\",d:\"een dag\",dd:\"%d dagen\",M:\"een maand\",MM:\"%d maanden\",y:\"een jaar\",yy:\"%d jaar\"}};return e.locale(a,null,!0),a});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/nl.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/nn.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/nn.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var t={name:\"nn\",weekdays:\"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag\".split(\"_\"),weekdaysShort:\"sun_mån_tys_ons_tor_fre_lau\".split(\"_\"),weekdaysMin:\"su_må_ty_on_to_fr_la\".split(\"_\"),months:\"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des\".split(\"_\"),ordinal:function(e){return e+\".\"},weekStart:1,relativeTime:{future:\"om %s\",past:\"for %s sidan\",s:\"nokre sekund\",m:\"eitt minutt\",mm:\"%d minutt\",h:\"ein time\",hh:\"%d timar\",d:\"ein dag\",dd:\"%d dagar\",M:\"ein månad\",MM:\"%d månadar\",y:\"eitt år\",yy:\"%d år\"}};return e.locale(t,null,!0),t});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/nn.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/pl.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/pl.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,i){ true?module.exports=i(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var i={name:\"pl\",weekdays:\"Niedziela_Poniedziałek_Wtorek_Środa_Czwartek_Piątek_Sobota\".split(\"_\"),weekdaysShort:\"Ndz_Pon_Wt_Śr_Czw_Pt_Sob\".split(\"_\"),weekdaysMin:\"Nd_Pn_Wt_Śr_Cz_Pt_So\".split(\"_\"),months:\"Styczeń_Luty_Marzec_Kwiecień_Maj_Czerwiec_Lipiec_Sierpień_Wrzesień_Październik_Listopad_Grudzień\".split(\"_\"),ordinal:function(e){return e+\".\"},weekStart:1,relativeTime:{future:\"za %s\",past:\"po %s\",s:\"kilka sekund\",m:\"minuta\",mm:\"%d minut\",h:\"godzina\",hh:\"%d godzin\",d:\"tydzień\",dd:\"%d tygodni\",M:\"miesiąc\",MM:\"%d miesięcy\",y:\"rok\",yy:\"%d lat\"}};return e.locale(i,null,!0),i});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/pl.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/pt-br.js":
/*!********************************************!*\
  !*** ./node_modules/dayjs/locale/pt-br.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,o){ true?module.exports=o(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var o={name:\"pt-br\",weekdays:\"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado\".split(\"_\"),months:\"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro\".split(\"_\"),ordinal:function(e){return e+\"º\"},formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY [às] HH:mm\",LLLL:\"dddd, D [de] MMMM [de] YYYY [às] HH:mm\"},relativeTime:{future:\"em %s\",past:\"há %s\",s:\"poucos segundos\",m:\"um minuto\",mm:\"%d minutos\",h:\"uma hora\",hh:\"%d horas\",d:\"um dia\",dd:\"%d dias\",M:\"um mês\",MM:\"%d meses\",y:\"um ano\",yy:\"%d anos\"}};return e.locale(o,null,!0),o});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/pt-br.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/pt.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/pt.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,a){ true?module.exports=a(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var a={name:\"pt\",weekdays:\"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado\".split(\"_\"),months:\"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro\".split(\"_\"),ordinal:function(e){return e+\"º\"},weekStart:1,relativeTime:{future:\"em %s\",past:\"há %s\",s:\"alguns segundos\",m:\"um minuto\",mm:\"%d minutos\",h:\"uma hora\",hh:\"%d horas\",d:\"um dia\",dd:\"%d dias\",M:\"um mês\",MM:\"%d meses\",y:\"um ano\",yy:\"%d anos\"}};return e.locale(a,null,!0),a});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/pt.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/ro.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/ro.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,i){ true?module.exports=i(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var i={name:\"ro\",weekdays:\"Duminică_Luni_Marți_Miercuri_Joi_Vineri_Sâmbătă\".split(\"_\"),months:\"Ianuarie_Februarie_Martie_Aprilie_Mai_Iunie_Iulie_August_Septembrie_Octombrie_Noiembrie_Decembrie\".split(\"_\"),weekStart:1,formats:{LT:\"H:mm\",LTS:\"H:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY H:mm\",LLLL:\"dddd, D MMMM YYYY H:mm\"},relativeTime:{future:\"peste %s\",past:\"acum %s\",s:\"câteva secunde\",m:\"un minut\",mm:\"%d minute\",h:\"o oră\",hh:\"%d ore\",d:\"o zi\",dd:\"%d zile\",M:\"o lună\",MM:\"%d luni\",y:\"un an\",yy:\"%d ani\"},ordinal:function(e){return e}};return e.locale(i,null,!0),i});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/ro.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/ru.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/ru.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(_,e){ true?module.exports=e(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(_){\"use strict\";_=_&&_.hasOwnProperty(\"default\")?_.default:_;var e={name:\"ru\",weekdays:\"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота\".split(\"_\"),weekdaysShort:\"вск_пнд_втр_срд_чтв_птн_сбт\".split(\"_\"),weekdaysMin:\"вс_пн_вт_ср_чт_пт_сб\".split(\"_\"),months:\"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь\".split(\"_\"),monthsShort:\"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек\".split(\"_\"),weekStart:1,formats:{LT:\"H:mm\",LTS:\"H:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY г.\",LLL:\"D MMMM YYYY г., H:mm\",LLLL:\"dddd, D MMMM YYYY г., H:mm\"},relativeTime:{future:\"через %s\",past:\"%s назад\",s:\"несколько секунд\",m:\"минута\",mm:\"%d минут\",h:\"час\",hh:\"%d часов\",d:\"день\",dd:\"%d дней\",M:\"месяц\",MM:\"%d месяцев\",y:\"год\",yy:\"%d лет\"},ordinal:function(_){return _}};return _.locale(e,null,!0),e});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/ru.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/sk.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/sk.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var t={name:\"sk\",weekdays:\"Nedeľa_Pondelok_Utorok_Streda_Štvrtok_Piatok_Sobota\".split(\"_\"),months:\"január_február_marec_apríl_máj_jún_júl_august_september_október_november_december\".split(\"_\"),weekStart:1,relativeTime:{future:\"o %s\",past:\"pred %s\",s:\"niekoľko sekúnd\",m:\"minúta\",mm:\"%d minút\",h:\"hodina\",hh:\"%d hodín\",d:\"deň\",dd:\"%d dní\",M:\"mesiac\",MM:\"%d mesiacov\",y:\"rok\",yy:\"%d rokov\"},ordinal:function(e){return e+\"º\"}};return e.locale(t,null,!0),t});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/sk.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/sr-cyrl.js":
/*!**********************************************!*\
  !*** ./node_modules/dayjs/locale/sr-cyrl.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var t={name:\"sr-cyrl\",weekdays:\"Недеља_Понедељак_Уторак_Среда_Четвртак_Петак_Субота\".split(\"_\"),months:\"Јануар_Фебруар_Март_Април_Мај_Јун_Јул_Август_Септембар_Октобар_Новембар_Децембар\".split(\"_\"),weekStart:1,relativeTime:{future:\"за %s\",past:\"пре %s\",s:\"секунда\",m:\"минут\",mm:\"%d минута\",h:\"сат\",hh:\"%d сати\",d:\"дан\",dd:\"%d дана\",M:\"месец\",MM:\"%d месеци\",y:\"година\",yy:\"%d године\"},ordinal:function(e){return e+\".\"}};return e.locale(t,null,!0),t});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/sr-cyrl.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/sr.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/sr.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,a){ true?module.exports=a(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var a={name:\"sr\",weekdays:\"Nedelja_Ponedeljak_Utorak_Sreda_Četvrtak_Petak_Subota\".split(\"_\"),months:\"Januar_Februar_Mart_April_Maj_Jun_Jul_Avgust_Septembar_Oktobar_Novembar_Decembar\".split(\"_\"),weekStart:1,relativeTime:{future:\"za %s\",past:\"pre %s\",s:\"sekunda\",m:\"minut\",mm:\"%d minuta\",h:\"sat\",hh:\"%d sati\",d:\"dan\",dd:\"%d dana\",M:\"mesec\",MM:\"%d meseci\",y:\"godina\",yy:\"%d godine\"},ordinal:function(e){return e+\".\"}};return e.locale(a,null,!0),a});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/sr.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/sv.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/sv.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,a){ true?module.exports=a(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(e){\"use strict\";e=e&&e.hasOwnProperty(\"default\")?e.default:e;var a={name:\"sv\",weekdays:\"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag\".split(\"_\"),weekdaysShort:\"sön_mån_tis_ons_tor_fre_lör\".split(\"_\"),weekdaysMin:\"sö_må_ti_on_to_fr_lö\".split(\"_\"),months:\"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec\".split(\"_\"),weekStart:1,ordinal:function(e){var a=e%10;return\"\"+e+(1===a||2===a?\"a\":\"e\")},formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"YYYY-MM-DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY [kl.] HH:mm\",LLLL:\"dddd D MMMM YYYY [kl.] HH:mm\"},relativeTime:{future:\"om %s\",past:\"för %s sedan\",s:\"några sekunder\",m:\"en minut\",mm:\"%d minuter\",h:\"en timme\",hh:\"%d timmar\",d:\"en dag\",dd:\"%d dagar\",M:\"en månad\",MM:\"%d månader\",y:\"ett år\",yy:\"%d år\"}};return e.locale(a,null,!0),a});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/sv.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/sw.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/sw.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(a,e){ true?module.exports=e(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(a){\"use strict\";a=a&&a.hasOwnProperty(\"default\")?a.default:a;var e={name:\"sw\",weekdays:\"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi\".split(\"_\"),weekdaysShort:\"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos\".split(\"_\"),weekdaysMin:\"J2_J3_J4_J5_Al_Ij_J1\".split(\"_\"),months:\"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba\".split(\"_\"),monthsShort:\"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des\".split(\"_\"),weekStart:1,ordinal:function(a){return a},relativeTime:{future:\"%s baadaye\",past:\"tokea %s\",s:\"hivi punde\",m:\"dakika moja\",mm:\"dakika %d\",h:\"saa limoja\",hh:\"masaa %d\",d:\"siku moja\",dd:\"masiku %d\",M:\"mwezi mmoja\",MM:\"miezi %d\",y:\"mwaka mmoja\",yy:\"miaka %d\"},formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY HH:mm\",LLLL:\"dddd, D MMMM YYYY HH:mm\"}};return a.locale(e,null,!0),e});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/sw.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/th.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/th.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(_,e){ true?module.exports=e(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(_){\"use strict\";_=_&&_.hasOwnProperty(\"default\")?_.default:_;var e={name:\"th\",weekdays:\"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์\".split(\"_\"),weekdaysShort:\"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์\".split(\"_\"),weekdaysMin:\"อา._จ._อ._พ._พฤ._ศ._ส.\".split(\"_\"),months:\"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฏาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม\".split(\"_\"),monthsShort:\"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.\".split(\"_\"),formats:{LT:\"H:mm\",LTS:\"H:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY เวลา H:mm\",LLLL:\"วันddddที่ D MMMM YYYY เวลา H:mm\"},relativeTime:{future:\"อีก %s\",past:\"%s ที่ผ่านมา\",s:\"ไม่กี่วิ\",m:\"นาที\",mm:\"%d นาที\",h:\"ชั่วโมง\",hh:\"%d ชั่วโมง\",d:\"วัน\",dd:\"%d วัน\",M:\"เดือน\",MM:\"%d เดือน\",y:\"ปี\",yy:\"%d ปี\"},ordinal:function(_){return _+\".\"}};return _.locale(e,null,!0),e});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/th.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/tr.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/tr.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(a,e){ true?module.exports=e(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(a){\"use strict\";a=a&&a.hasOwnProperty(\"default\")?a.default:a;var e={name:\"tr\",weekdays:\"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi\".split(\"_\"),months:\"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık\".split(\"_\"),weekStart:1,formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY HH:mm\",LLLL:\"dddd, D MMMM YYYY HH:mm\"},relativeTime:{future:\"%s sonra\",past:\"%s önce\",s:\"birkaç saniye\",m:\"bir dakika\",mm:\"%d dakika\",h:\"bir saat\",hh:\"%d saat\",d:\"bir gün\",dd:\"%d gün\",M:\"bir ay\",MM:\"%d ay\",y:\"bir yıl\",yy:\"%d yıl\"},ordinal:function(a){return a+\".\"}};return a.locale(e,null,!0),e});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/tr.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/uk.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/locale/uk.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(_,e){ true?module.exports=e(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(_){\"use strict\";_=_&&_.hasOwnProperty(\"default\")?_.default:_;var e={name:\"uk\",weekdays:\"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота\".split(\"_\"),weekdaysShort:\"ндл_пнд_втр_срд_чтв_птн_сбт\".split(\"_\"),weekdaysMin:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),months:\"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень\".split(\"_\"),monthsShort:\"сiч_лют_бер_квiт_трав_черв_лип_серп_вер_жовт_лист_груд\".split(\"_\"),weekStart:1,relativeTime:{future:\"через %s\",past:\"%s назад\",s:\"декілька секунд\",m:\"хвилина\",mm:\"%d хвилин\",h:\"година\",hh:\"%d годин\",d:\"день\",dd:\"%d днів\",M:\"місяць\",MM:\"%d місяців\",y:\"рік\",yy:\"%d роки\"},ordinal:function(_){return _}};return _.locale(e,null,!0),e});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/uk.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/zh-cn.js":
/*!********************************************!*\
  !*** ./node_modules/dayjs/locale/zh-cn.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(_,e){ true?module.exports=e(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(_){\"use strict\";_=_&&_.hasOwnProperty(\"default\")?_.default:_;var e={name:\"zh-cn\",weekdays:\"星期日_星期一_星期二_星期三_星期四_星期五_星期六\".split(\"_\"),weekdaysShort:\"周日_周一_周二_周三_周四_周五_周六\".split(\"_\"),weekdaysMin:\"日_一_二_三_四_五_六\".split(\"_\"),months:\"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),ordinal:function(_){return _+\"日\"},weekStart:1,formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"YYYY/MM/DD\",LL:\"YYYY年M月D日\",LLL:\"YYYY年M月D日Ah点mm分\",LLLL:\"YYYY年M月D日ddddAh点mm分\"},relativeTime:{future:\"%s内\",past:\"%s前\",s:\"几秒\",m:\"1 分钟\",mm:\"%d 分钟\",h:\"1 小时\",hh:\"%d 小时\",d:\"1 天\",dd:\"%d 天\",M:\"1 个月\",MM:\"%d 个月\",y:\"1 年\",yy:\"%d 年\"}};return _.locale(e,null,!0),e});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/zh-cn.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/zh-hk.js":
/*!********************************************!*\
  !*** ./node_modules/dayjs/locale/zh-hk.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(_,e){ true?module.exports=e(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(_){\"use strict\";_=_&&_.hasOwnProperty(\"default\")?_.default:_;var e={name:\"zh-hk\",months:\"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"星期日_星期一_星期二_星期三_星期四_星期五_星期六\".split(\"_\"),weekdaysShort:\"週日_週一_週二_週三_週四_週五_週六\".split(\"_\"),weekdaysMin:\"日_一_二_三_四_五_六\".split(\"_\"),ordinal:function(_){return _+\"日\"},formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"YYYY/MM/DD\",LL:\"YYYY年M月D日\",LLL:\"YYYY年M月D日 HH:mm\",LLLL:\"YYYY年M月D日dddd HH:mm\"},relativeTime:{future:\"%s內\",past:\"%s前\",s:\"幾秒\",m:\"一分鐘\",mm:\"%d 分鐘\",h:\"一小時\",hh:\"%d 小時\",d:\"一天\",dd:\"%d 天\",M:\"一個月\",MM:\"%d 個月\",y:\"一年\",yy:\"%d 年\"}};return _.locale(e,null,!0),e});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/zh-hk.js?");

/***/ }),

/***/ "./node_modules/dayjs/locale/zh-tw.js":
/*!********************************************!*\
  !*** ./node_modules/dayjs/locale/zh-tw.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(_,e){ true?module.exports=e(__webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\")):undefined}(this,function(_){\"use strict\";_=_&&_.hasOwnProperty(\"default\")?_.default:_;var e={name:\"zh-tw\",weekdays:\"星期日_星期一_星期二_星期三_星期四_星期五_星期六\".split(\"_\"),weekdaysShort:\"週日_週一_週二_週三_週四_週五_週六\".split(\"_\"),weekdaysMin:\"日_一_二_三_四_五_六\".split(\"_\"),months:\"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),ordinal:function(_){return _+\"日\"},formats:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"YYYY/MM/DD\",LL:\"YYYY年M月D日\",LLL:\"YYYY年M月D日 HH:mm\",LLLL:\"YYYY年M月D日dddd HH:mm\"},relativeTime:{future:\"%s內\",past:\"%s前\",s:\"幾秒\",m:\"1 分鐘\",mm:\"%d 分鐘\",h:\"1 小時\",hh:\"%d 小時\",d:\"1 天\",dd:\"%d 天\",M:\"1 個月\",MM:\"%d 個月\",y:\"1 年\",yy:\"%d 年\"}};return _.locale(e,null,!0),e});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/locale/zh-tw.js?");

/***/ }),

/***/ "./node_modules/dayjs/plugin/customParseFormat.js":
/*!********************************************************!*\
  !*** ./node_modules/dayjs/plugin/customParseFormat.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(t,n){ true?module.exports=n():undefined}(this,function(){\"use strict\";var t,n=/(\\[[^[]*\\])|([-:/.()\\s]+)|(A|a|YYYY|YY?|MM?M?M?|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,e=/\\d\\d/,r=/\\d\\d?/,o=/\\d*[^\\s\\d]+/;var s=function(t){return function(n){this[t]=+n}},i=[/[+-]\\d\\d:?\\d\\d/,function(t){var n,e;(this.zone||(this.zone={})).offset=(n=t.match(/([+-]|\\d\\d)/g),0===(e=60*n[1]+ +n[2])?0:\"+\"===n[0]?-e:e)}],a={A:[/[AP]M/,function(t){this.afternoon=\"PM\"===t}],a:[/[ap]m/,function(t){this.afternoon=\"pm\"===t}],S:[/\\d/,function(t){this.milliseconds=100*+t}],SS:[e,function(t){this.milliseconds=10*+t}],SSS:[/\\d{3}/,function(t){this.milliseconds=+t}],s:[r,s(\"seconds\")],ss:[e,s(\"seconds\")],m:[r,s(\"minutes\")],mm:[e,s(\"minutes\")],H:[r,s(\"hours\")],h:[r,s(\"hours\")],HH:[e,s(\"hours\")],hh:[e,s(\"hours\")],D:[r,s(\"day\")],DD:[e,s(\"day\")],M:[r,s(\"month\")],MM:[e,s(\"month\")],MMM:[o,function(n){var e=t,r=e.months,o=e.monthsShort,s=o?o.findIndex(function(t){return t===n}):r.findIndex(function(t){return t.substr(0,3)===n});if(s<0)throw new Error;this.month=s+1}],MMMM:[o,function(n){var e=t.months.indexOf(n);if(e<0)throw new Error;this.month=e+1}],Y:[/[+-]?\\d+/,s(\"year\")],YY:[e,function(t){t=+t,this.year=t+(t>68?1900:2e3)}],YYYY:[/\\d{4}/,s(\"year\")],Z:i,ZZ:i};var u=function(t,e,r){try{var o=function(t){for(var e=t.match(n),r=e.length,o=0;o<r;o+=1){var s=e[o],i=a[s],u=i&&i[0],f=i&&i[1];e[o]=f?{regex:u,parser:f}:s.replace(/^\\[|\\]$/g,\"\")}return function(t){for(var n={},o=0,s=0;o<r;o+=1){var i=e[o];if(\"string\"==typeof i)s+=i.length;else{var a=i.regex,u=i.parser,f=t.substr(s),h=a.exec(f)[0];u.call(n,h),s+=h.length}}return function(t){var n=t.afternoon;if(void 0!==n){var e=t.hours;n?e<12&&(t.hours+=12):12===e&&(t.hours=0),delete t.afternoon}}(n),n}}(e)(t),s=o.year,i=o.month,u=o.day,f=o.hours,h=o.minutes,d=o.seconds,c=o.milliseconds,m=o.zone;if(m)return new Date(Date.UTC(s,i-1,u,f||0,h||0,d||0,c||0)+60*m.offset*1e3);var l=new Date,v=s||l.getFullYear(),p=i>0?i-1:l.getMonth(),M=u||l.getDate(),y=f||0,Y=h||0,g=d||0,D=c||0;return r?new Date(Date.UTC(v,p,M,y,Y,g,D)):new Date(v,p,M,y,Y,g,D)}catch(t){return new Date(\"\")}};return function(n,e,r){var o=e.prototype,s=o.parse;o.parse=function(n){var e=n.date,o=n.format,i=n.pl,a=n.utc;this.$u=a,o?(t=i?r.Ls[i]:this.$locale(),this.$d=u(e,o,a),this.init(n)):s.call(this,n)}}});\n\n\n//# sourceURL=webpack:///./node_modules/dayjs/plugin/customParseFormat.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/reflect-metadata/Reflect.js":
/*!**************************************************!*\
  !*** ./node_modules/reflect-metadata/Reflect.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/reflect-metadata/Reflect.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/harmony-module.js?");

/***/ }),

/***/ "./src/annotations/JsonAnyGetter.js":
/*!******************************************!*\
  !*** ./src/annotations/JsonAnyGetter.js ***!
  \******************************************/
/*! exports provided: JsonAnyGetter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonAnyGetter\", function() { return JsonAnyGetter; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonAnyGetter(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    enabled: true\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (propertyKey && options.enabled) Reflect.defineMetadata(\"jackson:JsonAnyGetter\", propertyKey, target);\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonAnyGetter.js?");

/***/ }),

/***/ "./src/annotations/JsonAnySetter.js":
/*!******************************************!*\
  !*** ./src/annotations/JsonAnySetter.js ***!
  \******************************************/
/*! exports provided: JsonAnySetter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonAnySetter\", function() { return JsonAnySetter; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonAnySetter(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    enabled: true\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (propertyKey && options.enabled) Reflect.defineMetadata(\"jackson:JsonAnySetter\", propertyKey, target);\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonAnySetter.js?");

/***/ }),

/***/ "./src/annotations/JsonBackReference.js":
/*!**********************************************!*\
  !*** ./src/annotations/JsonBackReference.js ***!
  \**********************************************/
/*! exports provided: JsonBackReference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonBackReference\", function() { return JsonBackReference; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonBackReference(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: null\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (descriptor && options.value != null) {\n      Reflect.defineMetadata(\"jackson:JsonBackReference\", options.value, target.constructor, propertyKey);\n      Reflect.defineMetadata(\"jackson:JsonBackReference:\" + propertyKey, options.value, target.constructor);\n    }\n\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonBackReference.js?");

/***/ }),

/***/ "./src/annotations/JsonCreator.js":
/*!****************************************!*\
  !*** ./src/annotations/JsonCreator.js ***!
  \****************************************/
/*! exports provided: JsonCreator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonCreator\", function() { return JsonCreator; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonCreator(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    properties: null\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    options.constructor = null;\n    options.method = null;\n\n    if (descriptor && typeof descriptor.value === \"function\") {\n      options.method = descriptor.value;\n      Reflect.defineMetadata(\"jackson:JsonCreator\", options, target);\n    } else if (!descriptor && Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"isClass\"])(target)) {\n      options.constructor = target; // get original constructor\n\n      while (options.constructor.toString().trim().startsWith(\"class extends target {\")) options.constructor = Object.getPrototypeOf(options.constructor);\n\n      Reflect.defineMetadata(\"jackson:JsonCreator\", options, target);\n      return target;\n    }\n\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonCreator.js?");

/***/ }),

/***/ "./src/annotations/JsonDeserialize.js":
/*!********************************************!*\
  !*** ./src/annotations/JsonDeserialize.js ***!
  \********************************************/
/*! exports provided: JsonDeserialize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonDeserialize\", function() { return JsonDeserialize; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonDeserialize(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    using: null\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (propertyKey && options.using) Reflect.defineMetadata(\"jackson:JsonDeserialize\", options.using, target.constructor, propertyKey);\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonDeserialize.js?");

/***/ }),

/***/ "./src/annotations/JsonFormat.js":
/*!***************************************!*\
  !*** ./src/annotations/JsonFormat.js ***!
  \***************************************/
/*! exports provided: JsonFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonFormat\", function() { return JsonFormat; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonFormat(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    shape: 0,\n    pattern: null,\n    locale: \"en-US\",\n    timezone: {}\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (propertyKey) Reflect.defineMetadata(\"jackson:JsonFormat\", options, target, propertyKey);\n    return descriptor;\n  });\n}\nObject.defineProperty(JsonFormat, \"Shape\", {\n  writable: true,\n  enumerable: true,\n  configurable: true,\n  value: {\n    ANY: 0,\n    ARRAY: 1,\n    BOOLEAN: 2,\n    NUMBER_FLOAT: 3,\n    NUMBER_INT: 4,\n    OBJECT: 5,\n    SCALAR: 6,\n    STRING: 7\n  }\n});\n\n//# sourceURL=webpack:///./src/annotations/JsonFormat.js?");

/***/ }),

/***/ "./src/annotations/JsonIgnore.js":
/*!***************************************!*\
  !*** ./src/annotations/JsonIgnore.js ***!
  \***************************************/
/*! exports provided: JsonIgnore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonIgnore\", function() { return JsonIgnore; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonIgnore(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: true\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (propertyKey && options.value) Reflect.defineMetadata(\"jackson:JsonIgnore\", null, target.constructor, propertyKey);\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonIgnore.js?");

/***/ }),

/***/ "./src/annotations/JsonIgnoreProperties.js":
/*!*************************************************!*\
  !*** ./src/annotations/JsonIgnoreProperties.js ***!
  \*************************************************/
/*! exports provided: JsonIgnoreProperties */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonIgnoreProperties\", function() { return JsonIgnoreProperties; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonIgnoreProperties(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: null,\n    allowGetters: false,\n    allowSetters: false\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (!descriptor && Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"isClass\"])(target)) {\n      Reflect.defineMetadata(\"jackson:JsonIgnoreProperties\", options, target);\n      return target;\n    }\n\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonIgnoreProperties.js?");

/***/ }),

/***/ "./src/annotations/JsonIgnoreType.js":
/*!*******************************************!*\
  !*** ./src/annotations/JsonIgnoreType.js ***!
  \*******************************************/
/*! exports provided: JsonIgnoreType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonIgnoreType\", function() { return JsonIgnoreType; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonIgnoreType(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: true\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (options.value && !descriptor && Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"isClass\"])(target)) {\n      Reflect.defineMetadata(\"jackson:JsonIgnoreType\", null, target);\n      return target;\n    }\n\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonIgnoreType.js?");

/***/ }),

/***/ "./src/annotations/JsonInclude.js":
/*!****************************************!*\
  !*** ./src/annotations/JsonInclude.js ***!
  \****************************************/
/*! exports provided: JsonInclude */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonInclude\", function() { return JsonInclude; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonInclude(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: 0\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (options.value !== 0) {\n      if (!descriptor && Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"isClass\"])(target)) {\n        Reflect.defineMetadata(\"jackson:JsonInclude\", options, target);\n        return target;\n      } else if (propertyKey) Reflect.defineMetadata(\"jackson:JsonInclude\", options, target, propertyKey);\n    }\n\n    return descriptor;\n  });\n}\nObject.defineProperty(JsonInclude, \"Include\", {\n  writable: true,\n  enumerable: true,\n  configurable: true,\n  value: {\n    ALWAYS: 0,\n    NON_EMPTY: 1,\n    NON_NULL: 2\n  }\n});\n\n//# sourceURL=webpack:///./src/annotations/JsonInclude.js?");

/***/ }),

/***/ "./src/annotations/JsonManagedReference.js":
/*!*************************************************!*\
  !*** ./src/annotations/JsonManagedReference.js ***!
  \*************************************************/
/*! exports provided: JsonManagedReference */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonManagedReference\", function() { return JsonManagedReference; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonManagedReference(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: null\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (descriptor && options.value != null) {\n      Reflect.defineMetadata(\"jackson:JsonManagedReference\", options.value, target.constructor, propertyKey);\n      Reflect.defineMetadata(\"jackson:JsonManagedReference:\" + propertyKey, options.value, target.constructor);\n    }\n\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonManagedReference.js?");

/***/ }),

/***/ "./src/annotations/JsonProperty.js":
/*!*****************************************!*\
  !*** ./src/annotations/JsonProperty.js ***!
  \*****************************************/
/*! exports provided: JsonProperty */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonProperty\", function() { return JsonProperty; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonProperty(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: null,\n    defaultValue: null\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (descriptor) {\n      options.defaultValue = options.defaultValue ? options.defaultValue : propertyKey;\n      options.value = options.value ? options.value : options.defaultValue;\n      Reflect.defineMetadata(\"jackson:JsonProperty\", options, target, propertyKey);\n      Reflect.defineMetadata(\"jackson:JsonProperty:\" + propertyKey, options, target.constructor);\n      Reflect.defineMetadata(\"jackson:JsonProperty:reverse:\" + options.value, propertyKey, target.constructor);\n    }\n\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonProperty.js?");

/***/ }),

/***/ "./src/annotations/JsonPropertyOrder.js":
/*!**********************************************!*\
  !*** ./src/annotations/JsonPropertyOrder.js ***!
  \**********************************************/
/*! exports provided: JsonPropertyOrder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonPropertyOrder\", function() { return JsonPropertyOrder; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonPropertyOrder(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    alphabetic: false,\n    value: []\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (!descriptor && Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"isClass\"])(target)) {\n      Reflect.defineMetadata(\"jackson:JsonPropertyOrder\", options, target);\n      return target;\n    }\n\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonPropertyOrder.js?");

/***/ }),

/***/ "./src/annotations/JsonRawValue.js":
/*!*****************************************!*\
  !*** ./src/annotations/JsonRawValue.js ***!
  \*****************************************/
/*! exports provided: JsonRawValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonRawValue\", function() { return JsonRawValue; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonRawValue(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: true\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (propertyKey && options.value) Reflect.defineMetadata(\"jackson:JsonRawValue\", null, target.constructor, propertyKey);\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonRawValue.js?");

/***/ }),

/***/ "./src/annotations/JsonRootName.js":
/*!*****************************************!*\
  !*** ./src/annotations/JsonRootName.js ***!
  \*****************************************/
/*! exports provided: JsonRootName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonRootName\", function() { return JsonRootName; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonRootName(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: null\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (!descriptor && Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"isClass\"])(target)) {\n      Reflect.defineMetadata(\"jackson:JsonRootName\", options.value || target.name, target);\n      return target;\n    }\n\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonRootName.js?");

/***/ }),

/***/ "./src/annotations/JsonSerialize.js":
/*!******************************************!*\
  !*** ./src/annotations/JsonSerialize.js ***!
  \******************************************/
/*! exports provided: JsonSerialize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonSerialize\", function() { return JsonSerialize; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonSerialize(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    using: null\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (propertyKey && options.using) Reflect.defineMetadata(\"jackson:JsonSerialize\", options.using, target, propertyKey);\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonSerialize.js?");

/***/ }),

/***/ "./src/annotations/JsonSubTypes.js":
/*!*****************************************!*\
  !*** ./src/annotations/JsonSubTypes.js ***!
  \*****************************************/
/*! exports provided: JsonSubTypes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonSubTypes\", function() { return JsonSubTypes; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonSubTypes(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: null\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (options.value && options.value.length > 0 && !descriptor && Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"isClass\"])(target)) {\n      Reflect.defineMetadata(\"jackson:JsonSubTypes\", options.value, target);\n      return target;\n    }\n\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonSubTypes.js?");

/***/ }),

/***/ "./src/annotations/JsonTypeInfo.js":
/*!*****************************************!*\
  !*** ./src/annotations/JsonTypeInfo.js ***!
  \*****************************************/
/*! exports provided: JsonTypeInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonTypeInfo\", function() { return JsonTypeInfo; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonTypeInfo(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    use: 0,\n    include: 0,\n    property: '@type'\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (!descriptor && Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"isClass\"])(target)) {\n      Reflect.defineMetadata(\"jackson:JsonTypeInfo\", options, target);\n      return target;\n    }\n\n    return descriptor;\n  });\n}\nObject.defineProperty(JsonTypeInfo, \"Id\", {\n  writable: true,\n  enumerable: true,\n  configurable: true,\n  value: {\n    CLASS: 0,\n    NAME: 1\n  }\n});\nObject.defineProperty(JsonTypeInfo, \"As\", {\n  writable: true,\n  enumerable: true,\n  configurable: true,\n  value: {\n    PROPERTY: 0,\n    WRAPPER_OBJECT: 1,\n    WRAPPER_ARRAY: 2\n  }\n});\n\n//# sourceURL=webpack:///./src/annotations/JsonTypeInfo.js?");

/***/ }),

/***/ "./src/annotations/JsonTypeName.js":
/*!*****************************************!*\
  !*** ./src/annotations/JsonTypeName.js ***!
  \*****************************************/
/*! exports provided: JsonTypeName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonTypeName\", function() { return JsonTypeName; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonTypeName(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: ''\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (options.value && options.value.trim() !== \"\" && !descriptor && Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"isClass\"])(target)) {\n      Reflect.defineMetadata(\"jackson:JsonTypeName\", options.value, target);\n      return target;\n    }\n\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonTypeName.js?");

/***/ }),

/***/ "./src/annotations/JsonValue.js":
/*!**************************************!*\
  !*** ./src/annotations/JsonValue.js ***!
  \**************************************/
/*! exports provided: JsonValue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonValue\", function() { return JsonValue; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonValue(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: true\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (descriptor && typeof descriptor.value === \"function\" && options.value) Reflect.defineMetadata(\"jackson:JsonValue\", propertyKey, target);\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonValue.js?");

/***/ }),

/***/ "./src/annotations/JsonView.js":
/*!*************************************!*\
  !*** ./src/annotations/JsonView.js ***!
  \*************************************/
/*! exports provided: JsonView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JsonView\", function() { return JsonView; });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"./src/util.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction JsonView(optionsOrTarget, propertyKey, descriptor) {\n  return Object(_util__WEBPACK_IMPORTED_MODULE_0__[\"makeDecorator\"])({\n    value: null\n  }, optionsOrTarget, propertyKey, descriptor, (options, target, propertyKey, descriptor) => {\n    if (propertyKey && options.value) Reflect.defineMetadata(\"jackson:JsonView\", options.value, target.constructor, propertyKey);\n    return descriptor;\n  });\n}\n\n//# sourceURL=webpack:///./src/annotations/JsonView.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _annotations_JsonAnyGetter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./annotations/JsonAnyGetter */ \"./src/annotations/JsonAnyGetter.js\");\n/* harmony import */ var _annotations_JsonProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./annotations/JsonProperty */ \"./src/annotations/JsonProperty.js\");\n/* harmony import */ var _annotations_JsonPropertyOrder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./annotations/JsonPropertyOrder */ \"./src/annotations/JsonPropertyOrder.js\");\n/* harmony import */ var _annotations_JsonRawValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./annotations/JsonRawValue */ \"./src/annotations/JsonRawValue.js\");\n/* harmony import */ var _annotations_JsonValue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./annotations/JsonValue */ \"./src/annotations/JsonValue.js\");\n/* harmony import */ var _annotations_JsonRootName__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./annotations/JsonRootName */ \"./src/annotations/JsonRootName.js\");\n/* harmony import */ var _annotations_JsonSerialize__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./annotations/JsonSerialize */ \"./src/annotations/JsonSerialize.js\");\n/* harmony import */ var _annotations_JsonCreator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./annotations/JsonCreator */ \"./src/annotations/JsonCreator.js\");\n/* harmony import */ var _annotations_JsonManagedReference__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./annotations/JsonManagedReference */ \"./src/annotations/JsonManagedReference.js\");\n/* harmony import */ var _annotations_JsonBackReference__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./annotations/JsonBackReference */ \"./src/annotations/JsonBackReference.js\");\n/* harmony import */ var _annotations_JsonAnySetter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./annotations/JsonAnySetter */ \"./src/annotations/JsonAnySetter.js\");\n/* harmony import */ var _annotations_JsonDeserialize__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./annotations/JsonDeserialize */ \"./src/annotations/JsonDeserialize.js\");\n/* harmony import */ var _annotations_JsonIgnore__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./annotations/JsonIgnore */ \"./src/annotations/JsonIgnore.js\");\n/* harmony import */ var _annotations_JsonIgnoreProperties__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./annotations/JsonIgnoreProperties */ \"./src/annotations/JsonIgnoreProperties.js\");\n/* harmony import */ var _annotations_JsonIgnoreType__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./annotations/JsonIgnoreType */ \"./src/annotations/JsonIgnoreType.js\");\n/* harmony import */ var _annotations_JsonInclude__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./annotations/JsonInclude */ \"./src/annotations/JsonInclude.js\");\n/* harmony import */ var _annotations_JsonTypeInfo__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./annotations/JsonTypeInfo */ \"./src/annotations/JsonTypeInfo.js\");\n/* harmony import */ var _annotations_JsonTypeName__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./annotations/JsonTypeName */ \"./src/annotations/JsonTypeName.js\");\n/* harmony import */ var _annotations_JsonSubTypes__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./annotations/JsonSubTypes */ \"./src/annotations/JsonSubTypes.js\");\n/* harmony import */ var _annotations_JsonFormat__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./annotations/JsonFormat */ \"./src/annotations/JsonFormat.js\");\n/* harmony import */ var _annotations_JsonView__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./annotations/JsonView */ \"./src/annotations/JsonView.js\");\n/* harmony import */ var _jackson__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./jackson */ \"./src/jackson.js\");\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _temp, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class4, _class5, _descriptor2, _descriptor3, _descriptor4, _temp2, _class7, _temp3, _dec11, _dec12, _class9, _dec13, _class10, _temp4, _dec14, _class12, _temp5, _dec15, _dec16, _dec17, _class14, _descriptor5, _temp6, _dec18, _dec19, _class16, _descriptor6, _temp7, _dec20, _dec21, _dec22, _class18, _descriptor7, _descriptor8, _descriptor9, _temp8;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass DateSerializer {\n  static serializeDate(date) {\n    return {\n      \"year\": date.getFullYear(),\n      \"month\": date.getMonth() + 1,\n      \"day\": date.getDate(),\n      \"formatted\": date.toLocaleDateString()\n    };\n  }\n\n  static deserializeDate(dateObj) {\n    return new Date(dateObj.formatted);\n  }\n\n} //@JsonRootName\n//@JsonIgnoreType\n\n\nlet Example2 = (_dec = Object(_annotations_JsonTypeInfo__WEBPACK_IMPORTED_MODULE_16__[\"JsonTypeInfo\"])({\n  use: _annotations_JsonTypeInfo__WEBPACK_IMPORTED_MODULE_16__[\"JsonTypeInfo\"].Id.CLASS,\n  include: _annotations_JsonTypeInfo__WEBPACK_IMPORTED_MODULE_16__[\"JsonTypeInfo\"].As.PROPERTY,\n  property: 'example2_type'\n}), _dec2 = Object(_annotations_JsonSerialize__WEBPACK_IMPORTED_MODULE_6__[\"JsonSerialize\"])({\n  using: DateSerializer.serializeDate\n}), _dec3 = Object(_annotations_JsonDeserialize__WEBPACK_IMPORTED_MODULE_11__[\"JsonDeserialize\"])({\n  using: DateSerializer.deserializeDate\n}), _dec(_class = (_class2 = (_temp = class Example2 {\n  //@JsonBackReference({value: \"Example3\"})\n  constructor(name, age, date, example) {\n    this.name = \"\";\n    this.age = 55;\n\n    _initializerDefineProperty(this, \"date\", _descriptor, this);\n\n    this.example = void 0;\n    this.name = name;\n    this.age = age;\n    this.date = date;\n    this.example = example;\n  }\n\n  static creator(name, age, date) {\n    return new Example2(name, age, date);\n  } //@JsonValue\n\n\n  getValue() {\n    return \"ciao \" + this.name;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"date\", [_dec2, _dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Date();\n  }\n}), _applyDecoratedDescriptor(_class2, \"creator\", [_annotations_JsonCreator__WEBPACK_IMPORTED_MODULE_7__[\"JsonCreator\"]], Object.getOwnPropertyDescriptor(_class2, \"creator\"), _class2)), _class2)) || _class); //@JsonCreator\n//@JsonIgnoreType\n//@JsonRootName\n\nlet Example = (_dec4 = Object(_annotations_JsonPropertyOrder__WEBPACK_IMPORTED_MODULE_2__[\"JsonPropertyOrder\"])({\n  value: [\"example2\", \"test2\", \"name\"]\n}), _dec5 = Object(_annotations_JsonTypeInfo__WEBPACK_IMPORTED_MODULE_16__[\"JsonTypeInfo\"])({\n  use: _annotations_JsonTypeInfo__WEBPACK_IMPORTED_MODULE_16__[\"JsonTypeInfo\"].Id.NAME,\n  include: _annotations_JsonTypeInfo__WEBPACK_IMPORTED_MODULE_16__[\"JsonTypeInfo\"].As.PROPERTY\n}), _dec6 = Object(_annotations_JsonSubTypes__WEBPACK_IMPORTED_MODULE_18__[\"JsonSubTypes\"])({\n  value: [{\n    value: \"Example3\",\n    name: 'custom_type_name'\n  }]\n}), _dec7 = Object(_annotations_JsonProperty__WEBPACK_IMPORTED_MODULE_1__[\"JsonProperty\"])({\n  value: \"username\"\n}), _dec8 = Object(_annotations_JsonProperty__WEBPACK_IMPORTED_MODULE_1__[\"JsonProperty\"])({\n  value: \"property_test\"\n}), _dec9 = Object(_annotations_JsonManagedReference__WEBPACK_IMPORTED_MODULE_8__[\"JsonManagedReference\"])({\n  value: Example2\n}), _dec10 = Object(_annotations_JsonCreator__WEBPACK_IMPORTED_MODULE_7__[\"JsonCreator\"])({\n  properties: {\n    \"name2\": \"username\"\n  }\n}), _dec4(_class4 = _dec5(_class4 = _dec6(_class4 = (_class5 = (_temp2 = class Example {\n  //@JsonIgnore\n  //@JsonInclude({value: JsonInclude.Include.NON_NULL})\n  constructor(name, age, test, example2_references) {\n    _initializerDefineProperty(this, \"name\", _descriptor2, this);\n\n    this.age = 5;\n    this.mTest = false;\n    this.test2 = false;\n\n    _initializerDefineProperty(this, \"testValue\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"example2_references\", _descriptor4, this);\n\n    this.name = name;\n    this.age = age;\n    this.mTest = test;\n    this.test2 = !test;\n    this.example2_references = example2_references;\n  } //@JsonAnyGetter({enabled: false})\n\n\n  testAnyGetter() {\n    return {\n      \"age\": this.age\n    };\n  }\n\n  static creator(name2, age, test\n  /*, example2_references*/\n  ) {\n    return new Example(name2, age, test\n    /*, example2_references*/\n    );\n  }\n\n}, _temp2), (_descriptor2 = _applyDecoratedDescriptor(_class5.prototype, \"name\", [_dec7], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"pippo\";\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class5.prototype, \"testValue\", [_annotations_JsonRawValue__WEBPACK_IMPORTED_MODULE_3__[\"JsonRawValue\"], _dec8], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '{\"asd\": 5}';\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, \"example2_references\", [_dec9], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class5, \"creator\", [_dec10], Object.getOwnPropertyDescriptor(_class5, \"creator\"), _class5)), _class5)) || _class4) || _class4) || _class4); //@JsonRootName\n\nlet //@JsonTypeName({value: \"example3\"})\nExample3 = Object(_annotations_JsonCreator__WEBPACK_IMPORTED_MODULE_7__[\"JsonCreator\"])(_class7 = (_temp3 = class Example3 extends Example {\n  constructor(...args) {\n    super(...args);\n    this.new_property = 344443434;\n  }\n\n}, _temp3)) || _class7;\n\nlet test = new Example2(\"test 1\", 20, new Date());\nlet test2 = new Example2(\"test 2\", 40, new Date()); //let a = new Example(\"my name\", 45, '');\n\nlet a = new Example3(\"my name\", null, ''); //a.example2_references = [test, test2];\n\na.example2_references = test; //let a = new Example(\"my name\", 45, false);\n//test.example = a;\n//test2.example = a;\n\na.testValue = \"{\\\"test\\\": 100}\"; // let stringified1 = stringify(test, null, \"\\t\");\n// console.log(stringified1)\n// console.log(parse(stringified1, null, { mainCreator: Example2, otherCreators: [Example] }));\n// let stringified2 = stringify(a, null, \"\\t\");\n// console.log(stringified2)\n// //console.log(parse(stringified2, null, { mainCreator: Example, otherCreators: [Example2] }));\n// console.log(parse(stringified2, null, { mainCreator: Example3, otherCreators: [Example2] }));\n// class Address {\n// \t@JsonProperty({value: \"village\"})\n// \tmyVillage;\n// \t@JsonProperty({value: \"district\"})\n//   myDistrict;\n//   @JsonAnyGetter\n//   @JsonAnySetter\n//   addressDetails = {\n//     'state': '',\n//     'country': ''\n//   };\n//   //@JsonAnyGetter\n//   testAnyGetter() {\n//     return this.addressDetails;\n//   }\n//   //@JsonAnySetter\n//   testAnySetter(key, value) {\n//     this.addressDetails[key] = value;\n//   }\n// } \n// let address = new Address();\n// address.myVillage = \"ABCD\";\n// address.myDistrict = \"Varanasi\";\n// address.addressDetails.state = \"Uttar Pradesh\";\n// address.addressDetails.country = \"India\";\n// let jsonData =   \"{\"\n// \t\t\t+\"\\\"village\\\" : \\\"ABCD\\\",\"\n// \t\t\t+\"\\\"district\\\" : \\\"Varanasi\\\",\"\n// \t\t\t+\"\\\"state\\\" : \\\"Uttar Pradesh\\\",\"\n// \t\t\t+\"\\\"country\\\" : \\\"India\\\"\"\n// \t\t\t+\"}\";\n// let stringified3 = stringify(address, null, '\\t')\n// console.log(stringified3);\n// console.log(parse(stringified3, null, { mainCreator: Address, otherCreators: [] }));\n// console.log(parse(jsonData, null, { mainCreator: Address, otherCreators: [] }));\n\nlet Shape = (_dec11 = Object(_annotations_JsonTypeInfo__WEBPACK_IMPORTED_MODULE_16__[\"JsonTypeInfo\"])({\n  use: _annotations_JsonTypeInfo__WEBPACK_IMPORTED_MODULE_16__[\"JsonTypeInfo\"].Id.NAME,\n  include: _annotations_JsonTypeInfo__WEBPACK_IMPORTED_MODULE_16__[\"JsonTypeInfo\"].As.PROPERTY\n}), _dec12 = Object(_annotations_JsonSubTypes__WEBPACK_IMPORTED_MODULE_18__[\"JsonSubTypes\"])({\n  value: [{\n    value: \"Rectangle\",\n    name: \"rectangle\"\n  }, {\n    value: \"Circle\",\n    name: \"circle\"\n  }]\n}), _dec11(_class9 = _dec12(_class9 = class Shape {}) || _class9) || _class9);\nlet Rectangle = (_dec13 = Object(_annotations_JsonTypeName__WEBPACK_IMPORTED_MODULE_17__[\"JsonTypeName\"])(\"rectangle\"), _dec13(_class10 = (_temp4 = class Rectangle extends Shape {\n  constructor(w, h) {\n    super();\n    this.w = void 0;\n    this.h = void 0;\n    this.w = w;\n    this.h = h;\n  }\n\n}, _temp4)) || _class10);\nlet Circle = (_dec14 = Object(_annotations_JsonTypeName__WEBPACK_IMPORTED_MODULE_17__[\"JsonTypeName\"])(\"circle\"), _dec14(_class12 = (_temp5 = class Circle extends Shape {\n  constructor(radius) {\n    super();\n    this.radius = void 0;\n    this.radius = radius;\n  }\n\n}, _temp5)) || _class12);\nlet View = (_dec15 = Object(_annotations_JsonFormat__WEBPACK_IMPORTED_MODULE_19__[\"JsonFormat\"])({\n  shape: _annotations_JsonFormat__WEBPACK_IMPORTED_MODULE_19__[\"JsonFormat\"].Shape.OBJECT\n}), _dec16 = Object(_annotations_JsonDeserialize__WEBPACK_IMPORTED_MODULE_11__[\"JsonDeserialize\"])({\n  using: shapes => {\n    return Object.values(shapes);\n  }\n}), _dec17 = Object(_annotations_JsonManagedReference__WEBPACK_IMPORTED_MODULE_8__[\"JsonManagedReference\"])({\n  value: Shape\n}), (_class14 = (_temp6 = class View {\n  constructor(shapes) {\n    _initializerDefineProperty(this, \"shapes\", _descriptor5, this);\n\n    this.shapes = shapes;\n  }\n\n}, _temp6), (_descriptor5 = _applyDecoratedDescriptor(_class14.prototype, \"shapes\", [_dec15, _dec16, _dec17], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n})), _class14)); // let view = new View();\n// view.shapes = [new Rectangle(10,20), new Circle(5)];\n// let stringified4 = stringify(view, null, \"\\t\");\n// console.log(stringified4)\n// console.log(parse(stringified4, null, { mainCreator: View, otherCreators: [Circle, Rectangle, Shape] }));\n\nlet Event = (_dec18 = Object(_annotations_JsonFormat__WEBPACK_IMPORTED_MODULE_19__[\"JsonFormat\"])({\n  shape: _annotations_JsonFormat__WEBPACK_IMPORTED_MODULE_19__[\"JsonFormat\"].Shape.STRING,\n  locale: 'es',\n  pattern: \"dddd YYYY-MM-DDTHH:mm:ssZ[Z]\",\n  timezone: \"America/New_York\"\n}), _dec19 = Object(_annotations_JsonDeserialize__WEBPACK_IMPORTED_MODULE_11__[\"JsonDeserialize\"])({\n  using: date => {\n    return Object(_jackson__WEBPACK_IMPORTED_MODULE_21__[\"day_js\"])(date, \"dddd YYYY-MM-DDTHH:mm:ssZ[Z]\").toDate();\n  }\n}), (_class16 = (_temp7 = class Event {\n  constructor() {\n    this.name = void 0;\n\n    _initializerDefineProperty(this, \"eventDate\", _descriptor6, this);\n  }\n\n}, _temp7), (_descriptor6 = _applyDecoratedDescriptor(_class16.prototype, \"eventDate\", [_dec18, _dec19], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class16)); // let event = new Event();\n// event.name = \"Event 1\";\n// event.eventDate = new Date();\n// let stringified5 = stringify(event, null, \"\\t\");\n// console.log(stringified5)\n// console.log(parse(stringified5, null, { mainCreator: Event }));\n\nclass Public {}\n\nclass Internal extends Public {}\n\nclass Views {}\n\nViews.public = Public;\nViews.internal = Internal;\nlet Item = (_dec20 = Object(_annotations_JsonView__WEBPACK_IMPORTED_MODULE_20__[\"JsonView\"])({\n  value: \"Public\"\n}), _dec21 = Object(_annotations_JsonView__WEBPACK_IMPORTED_MODULE_20__[\"JsonView\"])({\n  value: Views.public\n}), _dec22 = Object(_annotations_JsonView__WEBPACK_IMPORTED_MODULE_20__[\"JsonView\"])({\n  value: Views.internal\n}), (_class18 = (_temp8 = class Item {\n  constructor(id, itemName, ownerName) {\n    _initializerDefineProperty(this, \"id\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"itemName\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"ownerName\", _descriptor9, this);\n\n    this.id = id;\n    this.itemName = itemName;\n    this.ownerName = ownerName;\n  }\n\n}, _temp8), (_descriptor7 = _applyDecoratedDescriptor(_class18.prototype, \"id\", [_dec20], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = _applyDecoratedDescriptor(_class18.prototype, \"itemName\", [_dec21], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor9 = _applyDecoratedDescriptor(_class18.prototype, \"ownerName\", [_dec22], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class18));\nlet item = new Item(2, \"book\", \"John\");\nlet stringified6 = Object(_jackson__WEBPACK_IMPORTED_MODULE_21__[\"stringify\"])(item, null, \"\\t\", {\n  view: Views.internal\n});\nconsole.log(stringified6);\nconsole.log(Object(_jackson__WEBPACK_IMPORTED_MODULE_21__[\"parse\"])(stringified6, null, {\n  mainCreator: Item,\n  view: Views.public\n}));\nmodule.export = {\n  JsonAnyGetter: _annotations_JsonAnyGetter__WEBPACK_IMPORTED_MODULE_0__[\"JsonAnyGetter\"],\n  JsonProperty: _annotations_JsonProperty__WEBPACK_IMPORTED_MODULE_1__[\"JsonProperty\"],\n  JsonPropertyOrder: _annotations_JsonPropertyOrder__WEBPACK_IMPORTED_MODULE_2__[\"JsonPropertyOrder\"],\n  JsonRawValue: _annotations_JsonRawValue__WEBPACK_IMPORTED_MODULE_3__[\"JsonRawValue\"],\n  JsonValue: _annotations_JsonValue__WEBPACK_IMPORTED_MODULE_4__[\"JsonValue\"],\n  JsonRootName: _annotations_JsonRootName__WEBPACK_IMPORTED_MODULE_5__[\"JsonRootName\"],\n  JsonSerialize: _annotations_JsonSerialize__WEBPACK_IMPORTED_MODULE_6__[\"JsonSerialize\"],\n  JsonCreator: _annotations_JsonCreator__WEBPACK_IMPORTED_MODULE_7__[\"JsonCreator\"],\n  JsonManagedReference: _annotations_JsonManagedReference__WEBPACK_IMPORTED_MODULE_8__[\"JsonManagedReference\"],\n  JsonBackReference: _annotations_JsonBackReference__WEBPACK_IMPORTED_MODULE_9__[\"JsonBackReference\"],\n  JsonAnySetter: _annotations_JsonAnySetter__WEBPACK_IMPORTED_MODULE_10__[\"JsonAnySetter\"],\n  JsonDeserialize: _annotations_JsonDeserialize__WEBPACK_IMPORTED_MODULE_11__[\"JsonDeserialize\"],\n  JsonIgnore: _annotations_JsonIgnore__WEBPACK_IMPORTED_MODULE_12__[\"JsonIgnore\"],\n  JsonIgnoreProperties: _annotations_JsonIgnoreProperties__WEBPACK_IMPORTED_MODULE_13__[\"JsonIgnoreProperties\"],\n  JsonIgnoreType: _annotations_JsonIgnoreType__WEBPACK_IMPORTED_MODULE_14__[\"JsonIgnoreType\"],\n  JsonInclude: _annotations_JsonInclude__WEBPACK_IMPORTED_MODULE_15__[\"JsonInclude\"],\n  JsonTypeInfo: _annotations_JsonTypeInfo__WEBPACK_IMPORTED_MODULE_16__[\"JsonTypeInfo\"],\n  JsonTypeName: _annotations_JsonTypeName__WEBPACK_IMPORTED_MODULE_17__[\"JsonTypeName\"],\n  JsonSubTypes: _annotations_JsonSubTypes__WEBPACK_IMPORTED_MODULE_18__[\"JsonSubTypes\"],\n  JsonFormat: _annotations_JsonFormat__WEBPACK_IMPORTED_MODULE_19__[\"JsonFormat\"],\n  JsonView: _annotations_JsonView__WEBPACK_IMPORTED_MODULE_20__[\"JsonView\"]\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/jackson.js":
/*!************************!*\
  !*** ./src/jackson.js ***!
  \************************/
/*! exports provided: day_js, stringify, parse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"day_js\", function() { return day_js; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stringify\", function() { return stringify; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parse\", function() { return parse; });\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! reflect-metadata */ \"./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(reflect_metadata__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var dayjs_plugin_customParseFormat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs/plugin/customParseFormat */ \"./node_modules/dayjs/plugin/customParseFormat.js\");\n/* harmony import */ var dayjs_plugin_customParseFormat__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dayjs_plugin_customParseFormat__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ \"./src/util.js\");\n\n\n\n\ndayjs__WEBPACK_IMPORTED_MODULE_1___default.a.extend(dayjs_plugin_customParseFormat__WEBPACK_IMPORTED_MODULE_2___default.a);\nconst day_js = dayjs__WEBPACK_IMPORTED_MODULE_1___default.a;\nfunction stringify(obj, replacer, format, options) {\n  return JSON.stringify(obj, (key, value = null) => {\n    if (value && typeof value === 'object' && !(value instanceof Array)) {\n      if (stringifyJsonIgnoreType(value)) return null;\n      let replacement;\n      let jsonValue = stringifyJsonValue(value);\n      if (jsonValue) replacement = jsonValue;\n\n      if (!replacement) {\n        replacement = {};\n        let keys = stringifyJsonPropertyOrder(value);\n\n        for (let k of keys) {\n          if (!stringifyHasJsonIgnore(value, k) && !stringifyJsonInclude(value, k) && stringifyHasJsonView(value, k, options) && Object.hasOwnProperty.call(value, k)) {\n            replacement[k] = value[k];\n            stringifyJsonFormat(replacement, value, k);\n            stringifyJsonSerialize(replacement, value, k);\n            stringifyJsonRawValue(replacement, value, k);\n            stringifyJsonProperty(replacement, value, k);\n            stringifyJsonManagedReference(replacement, value, k);\n            stringifyJsonBackReference(replacement, value, k);\n            stringifyJsonAnyGetter(replacement, value, k);\n          }\n        }\n      }\n\n      replacement = stringifyJsonTypeInfo(replacement, value);\n      replacement = stringifyJsonRootName(replacement, value);\n      return replacer ? replacer(key, replacement) : replacement;\n    }\n\n    return replacer ? replacer(key, value) : value;\n  }, format);\n}\nfunction parse(text, reviver, options = {\n  mainCreator: null,\n  otherCreators: []\n}) {\n  options.otherCreators = options.otherCreators ? options.otherCreators : [];\n\n  if (options.mainCreator) {\n    options.otherCreators.push(options.mainCreator);\n    let value = JSON.parse(text);\n    return deepParse('', value, reviver, options);\n  }\n\n  return JSON.parse(text, reviver);\n}\n\nfunction deepParse(key, value, reviver, options) {\n  if (value && typeof value === 'object' && !(value instanceof Array)) {\n    if (parseJsonIgnoreType(options)) return null;\n    let replacement = value;\n    replacement = parseJsonRootName(replacement, reviver, options); // convert JsonProperty to Class properties\n\n    const creatorMetadataKeys = Reflect.getMetadataKeys(options.mainCreator);\n\n    for (const metadataKey of creatorMetadataKeys) {\n      if (metadataKey.startsWith(\"jackson:JsonProperty:\")) {\n        const metadata = Reflect.getMetadata(metadataKey, options.mainCreator);\n        const realKey = metadataKey.replace(\"jackson:JsonProperty:\", \"\");\n\n        if (Object.hasOwnProperty.call(replacement, metadata.value)) {\n          replacement[realKey] = replacement[metadata.value];\n          delete replacement[metadata.value];\n        }\n      }\n    }\n\n    for (let k in replacement) {\n      if (Object.hasOwnProperty.call(replacement, k)) {\n        if (parseHasJsonIgnore(options, k) || !parseHasJsonView(options, k)) {\n          delete replacement[k];\n        } else {\n          parseJsonRawValue(options, replacement, k);\n          parseJsonDeserialize(options, replacement, k);\n        }\n      }\n    }\n\n    let jsonJsonCreator = parseJsonCreator(reviver, options, replacement);\n    if (jsonJsonCreator) replacement = jsonJsonCreator;\n\n    for (let k in value) if (Object.hasOwnProperty.call(value, k)) parseJsonAnySetter(replacement, value, k);\n\n    if (reviver) for (let key in replacement) if (Object.hasOwnProperty.call(replacement, key)) replacement[key] = reviver(key, replacement[key]);\n    return reviver ? reviver(key, replacement) : replacement;\n  } else if (value && value instanceof Array) {\n    const jsonTypeInfo = parseJsonTypeInfo(options, value);\n\n    if (jsonTypeInfo) {\n      options.mainCreator = jsonTypeInfo.creator;\n      return deepParse(key, jsonTypeInfo.newObj, reviver, options);\n    }\n\n    let arr = [];\n\n    for (let obj of value) arr.push(deepParse(key, obj, reviver, options));\n\n    return reviver ? reviver(key, arr) : arr;\n  }\n\n  return reviver ? reviver(key, value) : value;\n}\n\nfunction stringifyJsonAnyGetter(replacement, obj, key) {\n  const jsonAnyGetter = Reflect.getMetadata(\"jackson:JsonAnyGetter\", obj);\n  let jsonProperty = Reflect.getMetadata(\"jackson:JsonProperty\", obj, key);\n\n  if (!jsonProperty && jsonAnyGetter && obj[jsonAnyGetter]) {\n    let value = typeof obj[jsonAnyGetter] === \"function\" ? obj[jsonAnyGetter]() : obj[jsonAnyGetter];\n\n    for (let k in value) if (Object.hasOwnProperty.call(value, k)) replacement[k] = value[k];\n\n    delete replacement[key];\n  }\n}\n\nfunction stringifyJsonPropertyOrder(obj) {\n  let keys = Object.keys(obj);\n  const jsonPropertyOrder = Reflect.getMetadata(\"jackson:JsonPropertyOrder\", obj.constructor);\n\n  if (jsonPropertyOrder) {\n    if (jsonPropertyOrder.alphabetic) keys = keys.sort();else if (jsonPropertyOrder.value) keys = jsonPropertyOrder.value.concat(keys.filter(item => !jsonPropertyOrder.value.includes(item)));\n  }\n\n  return keys;\n}\n\nfunction stringifyJsonProperty(replacement, obj, key) {\n  const jsonProperty = Reflect.getMetadata(\"jackson:JsonProperty\", obj, key);\n  const hasJsonIgnore = Reflect.hasMetadata(\"jackson:JsonIgnore\", obj.constructor, key);\n\n  if (jsonProperty && !hasJsonIgnore && jsonProperty.value !== key) {\n    replacement[jsonProperty.value] = replacement[key];\n    delete replacement[key];\n    return true;\n  }\n\n  return false;\n}\n\nfunction stringifyJsonRawValue(replacement, obj, key) {\n  const jsonRawValue = Reflect.hasMetadata(\"jackson:JsonRawValue\", obj.constructor, key);\n\n  if (jsonRawValue) {\n    replacement[key] = JSON.parse(replacement[key]);\n    return true;\n  }\n\n  return false;\n}\n\nfunction stringifyJsonValue(obj) {\n  const jsonValue = Reflect.getMetadata(\"jackson:JsonValue\", obj);\n  if (jsonValue) return obj[jsonValue]();\n}\n\nfunction stringifyJsonRootName(replacement, obj) {\n  const jsonRootName = Reflect.getMetadata(\"jackson:JsonRootName\", obj.constructor);\n\n  if (jsonRootName) {\n    let newReplacement = {};\n    newReplacement[jsonRootName] = replacement;\n    return newReplacement;\n  }\n\n  return replacement;\n}\n\nfunction stringifyJsonSerialize(replacement, obj, key) {\n  const jsonSerialize = Reflect.getMetadata(\"jackson:JsonSerialize\", obj, key);\n\n  if (jsonSerialize) {\n    replacement[key] = jsonSerialize(replacement[key]);\n    return true;\n  }\n\n  return false;\n}\n\nfunction stringifyHasJsonIgnore(obj, key) {\n  const hasJsonIgnore = Reflect.hasMetadata(\"jackson:JsonIgnore\", obj.constructor, key);\n  const hasJsonProperty = Reflect.hasMetadata(\"jackson:JsonProperty\", obj, key);\n\n  if (!hasJsonIgnore) {\n    const jsonIgnoreProperties = Reflect.getMetadata(\"jackson:JsonIgnoreProperties\", obj.constructor);\n\n    if (jsonIgnoreProperties && !jsonIgnoreProperties.allowGetters) {\n      if (jsonIgnoreProperties.value.indexOf(key) >= 0) return true;\n      const jsonProperty = Reflect.getMetadata(\"jackson:JsonProperty\", obj, key);\n      if (jsonProperty && jsonIgnoreProperties.value.indexOf(jsonProperty.value) >= 0) return true;\n    }\n  }\n\n  return hasJsonIgnore && !hasJsonProperty;\n}\n\nfunction stringifyJsonInclude(obj, key) {\n  const keyJsonInclude = Reflect.getMetadata(\"jackson:JsonInclude\", obj, key);\n  const constructorJsonInclude = Reflect.getMetadata(\"jackson:JsonInclude\", obj.constructor);\n  const jsonInclude = keyJsonInclude ? keyJsonInclude : constructorJsonInclude;\n\n  if (jsonInclude && jsonInclude.value >= 0) {\n    const value = obj[key];\n\n    switch (jsonInclude.value) {\n      case 1:\n        return value == null || (typeof value === \"object\" || typeof value === \"string\") && Object.keys(value).length === 0;\n\n      case 2:\n        return value == null;\n    }\n  }\n\n  return false;\n}\n\nfunction stringifyJsonIgnoreType(obj) {\n  return Reflect.hasMetadata(\"jackson:JsonIgnoreType\", obj.constructor);\n}\n\nfunction stringifyJsonManagedReference(replacement, obj, key) {\n  const jsonManagedReference = Reflect.getMetadata(\"jackson:JsonManagedReference\", obj.constructor, key);\n\n  if (jsonManagedReference) {\n    let referenceConstructor;\n\n    if (replacement[key]) {\n      if (replacement[key] instanceof Array && replacement[key].length > 0) referenceConstructor = replacement[key][0].constructor;else if (replacement[key] instanceof Array && replacement[key].length == 0) referenceConstructor = {};else referenceConstructor = replacement[key].constructor;\n    } else referenceConstructor = {};\n\n    if (Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isSameConstructor\"])(jsonManagedReference, referenceConstructor)) {\n      const metadataKeys = Reflect.getMetadataKeys(referenceConstructor);\n\n      for (let k of metadataKeys) {\n        if (k.startsWith(\"jackson:JsonBackReference:\")) {\n          let propertyKey = k.replace(\"jackson:JsonBackReference:\", '');\n\n          if (replacement[key] instanceof Array) {\n            for (let index in replacement[key]) {\n              replacement[key][index] = Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"cloneClassInstance\"])(obj[key][index]);\n              delete replacement[key][index][propertyKey];\n            }\n          } else {\n            replacement[key] = Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"cloneClassInstance\"])(obj[key]);\n            delete replacement[key][propertyKey];\n          }\n\n          break;\n        }\n      }\n    }\n  }\n}\n\nfunction stringifyJsonBackReference(replacement, obj, key) {\n  const jsonBackReference = Reflect.getMetadata(\"jackson:JsonBackReference\", obj.constructor, key);\n\n  if (jsonBackReference) {\n    let referenceConstructor;\n\n    if (replacement[key]) {\n      if (replacement[key] instanceof Array && replacement[key].length > 0) referenceConstructor = replacement[key][0].constructor;else if (replacement[key] instanceof Array && replacement[key].length == 0) referenceConstructor = {};else referenceConstructor = replacement[key].constructor;\n    } else referenceConstructor = {};\n\n    if (Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isSameConstructor\"])(jsonBackReference, referenceConstructor)) {\n      const metadataKeys = Reflect.getMetadataKeys(referenceConstructor);\n\n      for (const k of metadataKeys) {\n        if (k.startsWith(\"jackson:JsonManagedReference:\")) {\n          const propertyKey = k.replace(\"jackson:JsonManagedReference:\", '');\n\n          if (replacement[key] instanceof Array) {\n            for (const index in replacement[key]) {\n              replacement[key][index] = Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"cloneClassInstance\"])(obj[key][index]);\n              delete replacement[key][index][propertyKey];\n            }\n          } else {\n            replacement[key] = Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"cloneClassInstance\"])(obj[key]);\n            delete replacement[key][propertyKey];\n          }\n\n          break;\n        }\n      }\n    }\n  }\n}\n\nfunction stringifyJsonTypeInfo(replacement, obj) {\n  const jsonTypeInfo = Reflect.getMetadata(\"jackson:JsonTypeInfo\", obj.constructor);\n\n  if (jsonTypeInfo) {\n    let jsonTypeName;\n    const jsonSubTypes = Reflect.getMetadata(\"jackson:JsonSubTypes\", obj.constructor);\n\n    if (jsonSubTypes) {\n      for (const subType of jsonSubTypes) {\n        if (subType.name && Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isSameConstructor\"])(subType.value, obj.constructor)) {\n          jsonTypeName = subType.name;\n          break;\n        }\n      }\n    }\n\n    if (!jsonTypeName) jsonTypeName = Reflect.getMetadata(\"jackson:JsonTypeName\", obj.constructor);\n\n    switch (jsonTypeInfo.use) {\n      case 0:\n        jsonTypeName = obj.constructor.name;\n        break;\n    }\n\n    let newReplacement;\n\n    switch (jsonTypeInfo.include) {\n      case 0:\n        replacement[jsonTypeInfo.property] = jsonTypeName;\n        break;\n\n      case 1:\n        newReplacement = {};\n        newReplacement[jsonTypeName] = replacement;\n        replacement = newReplacement;\n        break;\n\n      case 2:\n        newReplacement = [jsonTypeName, replacement];\n        replacement = newReplacement;\n        break;\n    }\n  }\n\n  return replacement;\n}\n\nfunction stringifyJsonFormat(replacement, obj, key) {\n  const jsonFormat = Reflect.getMetadata(\"jackson:JsonFormat\", obj, key);\n\n  if (jsonFormat) {\n    switch (jsonFormat.shape) {\n      case 1:\n        if (typeof replacement[key] === \"object\") replacement[key] = Object.values(replacement[key]);else replacement[key] = [replacement[key]];\n        break;\n\n      case 2:\n        replacement[key] = !!replacement[key];\n        break;\n\n      case 3:\n        if (replacement[key] instanceof Date) replacement[key] = parseFloat(replacement[key].getTime());else replacement[key] = parseFloat(replacement[key]);\n        break;\n\n      case 4:\n        if (replacement[key] instanceof Date) replacement[key] = replacement[key].getTime();else replacement[key] = parseInt(replacement[key]);\n        break;\n\n      case 5:\n        replacement[key] = Object.assign(Object.create(replacement[key]), replacement[key]);\n        break;\n\n      case 6:\n        if (typeof replacement[key] === \"object\") replacement[key] = null;\n        break;\n\n      case 7:\n        if (replacement[key] instanceof Date) {\n          const locale = jsonFormat.locale;\n\n          __webpack_require__(\"./node_modules/dayjs/locale sync recursive ^\\\\.\\\\/.*$\")(\"./\" + locale);\n\n          const timezone = jsonFormat.timezone ? {\n            timeZone: jsonFormat.timezone\n          } : {};\n          replacement[key] = dayjs__WEBPACK_IMPORTED_MODULE_1___default()(replacement[key].toLocaleString('en-US', timezone)).locale(locale).format(jsonFormat.pattern);\n        } else replacement[key] = replacement[key].toString();\n\n        break;\n    }\n  }\n}\n\nfunction stringifyHasJsonView(obj, key, options) {\n  if (options.view) {\n    const jsonView = Reflect.getMetadata(\"jackson:JsonView\", obj.constructor, key);\n\n    if (jsonView) {\n      return Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isSameConstructor\"])(jsonView, options.view) || Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isExtensionOf\"])(jsonView, options.view);\n    }\n  }\n\n  return true;\n}\n\nfunction parseJsonCreator(reviver, options, obj) {\n  if (obj) {\n    const jsonTypeInfo = parseJsonTypeInfo(options, obj);\n\n    if (jsonTypeInfo) {\n      options.mainCreator = jsonTypeInfo.creator;\n      obj = jsonTypeInfo.newObj;\n    }\n\n    const hasJsonCreator = Reflect.hasMetadata(\"jackson:JsonCreator\", options.mainCreator);\n    const jsonCreator = hasJsonCreator ? Reflect.getMetadata(\"jackson:JsonCreator\", options.mainCreator) : options.mainCreator;\n    const method = hasJsonCreator ? jsonCreator.constructor ? jsonCreator.constructor : jsonCreator.method : jsonCreator;\n    let args = [];\n    let argNames = Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"getArgumentNames\"])(method, !!jsonCreator.constructor);\n\n    if (jsonCreator.properties) {\n      for (let key in jsonCreator.properties) {\n        const index = argNames.indexOf(key);\n\n        if (index >= 0) {\n          const propValue = jsonCreator.properties[key];\n          const metadata = Reflect.getMetadata(\"jackson:JsonProperty:reverse:\" + propValue, options.mainCreator);\n          argNames[index] = metadata ? metadata : propValue;\n        }\n      }\n    } // prepare arguments for the instance creation\n\n\n    for (let key of argNames) {\n      if (Object.hasOwnProperty.call(obj, key)) args.push(parsePrepareMethodArg(reviver, options, obj, key));else args.push(null);\n    }\n\n    let instance = jsonCreator.constructor ? new method(...args) : method(...args); // copy remaining properties and ignore the ones that are not part of \"instance\"\n\n    let keys = Object.keys(obj).filter(n => !argNames.includes(n));\n\n    for (let key of keys) if (Object.hasOwnProperty.call(instance, key)) instance[key] = obj[key]; // if there is a reference, convert the reference property to the corresponding Class\n\n\n    for (let key in instance) {\n      if (Object.hasOwnProperty.call(instance, key)) {\n        parseJsonManagedReference(instance, reviver, options, obj, key);\n        parseJsonBackReference(instance, reviver, options, obj, key);\n      }\n    }\n\n    return instance;\n  }\n}\n\nfunction parseJsonRawValue(options, replacement, key) {\n  const jsonRawValue = Reflect.hasMetadata(\"jackson:JsonRawValue\", options.mainCreator, key);\n\n  if (jsonRawValue) {\n    replacement[key] = JSON.stringify(replacement[key]);\n    return true;\n  }\n\n  return false;\n}\n\nfunction parseJsonRootName(replacement, reviver, options) {\n  const jsonRootName = Reflect.getMetadata(\"jackson:JsonRootName\", options.mainCreator);\n  if (jsonRootName) return replacement[jsonRootName];\n  return replacement;\n}\n\nfunction parsePrepareMethodArg(reviver, options, obj, key) {\n  const jsonManagedReference = Reflect.getMetadata(\"jackson:JsonManagedReference\", options.mainCreator, key);\n  const jsonBackReference = Reflect.getMetadata(\"jackson:JsonBackReference\", options.mainCreator, key);\n  const jsonReference = jsonManagedReference ? jsonManagedReference : jsonBackReference;\n\n  if (jsonReference) {\n    let referenceCreator = options.mainCreator;\n\n    for (let constr of options.otherCreators) {\n      if (Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isSameConstructor\"])(jsonReference, constr)) {\n        referenceCreator = constr;\n        break;\n      }\n    }\n\n    let newOptions = Object.assign(options);\n    newOptions.mainCreator = referenceCreator;\n    return deepParse(key, obj[key], reviver, options);\n  }\n\n  return obj[key];\n}\n\nfunction parseJsonReferences(replacement, reviver, options, obj, key) {\n  const jsonManagedReference = Reflect.getMetadata(\"jackson:JsonManagedReference\", replacement.constructor, key);\n  const jsonBackReference = Reflect.getMetadata(\"jackson:JsonBackReference\", replacement.constructor, key);\n  const jsonReference = jsonManagedReference ? jsonManagedReference : jsonBackReference;\n  let referenceConstructor = {};\n\n  if (jsonReference && replacement[key]) {\n    if (replacement[key] instanceof Array && replacement[key].length > 0 && replacement[key][0]) {\n      if (!Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isSameConstructor\"])(jsonReference, replacement[key][0].constructor) && !Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isExtensionOf\"])(jsonReference, replacement[key][0].constructor)) replacement[key] = parsePrepareMethodArg(reviver, options, obj, key);\n      referenceConstructor = replacement[key][0].constructor;\n    } else if (replacement[key] instanceof Array && replacement[key].length == 0) referenceConstructor = {};else {\n      if (!Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isSameConstructor\"])(jsonReference, replacement[key].constructor) && !Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isExtensionOf\"])(jsonReference, replacement[key].constructor)) {\n        replacement[key] = parsePrepareMethodArg(reviver, options, obj, key);\n      }\n\n      referenceConstructor = replacement[key].constructor;\n    }\n  }\n\n  return referenceConstructor;\n}\n\nfunction parseJsonManagedReference(replacement, reviver, options, obj, key) {\n  const jsonManagedReference = Reflect.getMetadata(\"jackson:JsonManagedReference\", replacement.constructor, key);\n\n  if (jsonManagedReference) {\n    let referenceConstructor = parseJsonReferences(replacement, reviver, options, obj, key);\n\n    if (Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isSameConstructor\"])(jsonManagedReference, referenceConstructor)) {\n      const metadataKeys = Reflect.getMetadataKeys(referenceConstructor);\n\n      for (let k of metadataKeys) {\n        if (k.startsWith(\"jackson:JsonBackReference:\")) {\n          let propertyKey = k.replace(\"jackson:JsonBackReference:\", '');\n          if (replacement[key] instanceof Array) for (let index in replacement[key]) replacement[key][index][propertyKey] = replacement;else replacement[key][propertyKey] = replacement;\n          break;\n        }\n      }\n    }\n  }\n}\n\nfunction parseJsonBackReference(replacement, reviver, options, obj, key) {\n  const jsonBackReference = Reflect.getMetadata(\"jackson:JsonBackReference\", replacement.constructor, key);\n\n  if (jsonBackReference) {\n    let referenceConstructor = parseJsonReferences(replacement, reviver, options, obj, key);\n\n    if (Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isSameConstructor\"])(jsonBackReference, referenceConstructor)) {\n      const metadataKeys = Reflect.getMetadataKeys(referenceConstructor);\n\n      for (let k of metadataKeys) {\n        if (k.startsWith(\"jackson:JsonManagedReference:\")) {\n          let propertyKey = k.replace(\"jackson:JsonManagedReference:\", '');\n          if (replacement[key] instanceof Array) for (let index in replacement[key]) replacement[key][index][propertyKey] = replacement;else replacement[key][propertyKey] = replacement;\n          break;\n        }\n      }\n    }\n  }\n}\n\nfunction parseJsonAnySetter(replacement, value, key) {\n  const jsonAnySetter = Reflect.getMetadata(\"jackson:JsonAnySetter\", replacement);\n  let jsonProperty = Reflect.getMetadata(\"jackson:JsonProperty\", replacement, key);\n\n  if (!jsonProperty && jsonAnySetter && replacement[jsonAnySetter]) {\n    if (typeof replacement[jsonAnySetter] === \"function\") replacement[jsonAnySetter](key, value[key]);else replacement[jsonAnySetter][key] = value[key];\n  }\n}\n\nfunction parseJsonDeserialize(options, replacement, key) {\n  const jsonDeserialize = Reflect.getMetadata(\"jackson:JsonDeserialize\", options.mainCreator, key);\n\n  if (jsonDeserialize) {\n    replacement[key] = jsonDeserialize(replacement[key]);\n    return true;\n  }\n\n  return false;\n}\n\nfunction parseHasJsonIgnore(options, key) {\n  let hasJsonIgnore = Reflect.hasMetadata(\"jackson:JsonIgnore\", options.mainCreator, key);\n\n  if (!hasJsonIgnore) {\n    let jsonIgnoreProperties = Reflect.getMetadata(\"jackson:JsonIgnoreProperties\", options.mainCreator);\n\n    if (jsonIgnoreProperties && !jsonIgnoreProperties.allowSetters) {\n      if (jsonIgnoreProperties.value.indexOf(key) >= 0) return true;\n      let jsonProperty = Reflect.getMetadata(\"jackson:JsonProperty:\" + key, options.mainCreator);\n      if (jsonProperty && jsonIgnoreProperties.value.indexOf(jsonProperty.value) >= 0) return true;\n    }\n  }\n\n  return hasJsonIgnore;\n}\n\nfunction parseJsonIgnoreType(options) {\n  return Reflect.hasMetadata(\"jackson:JsonIgnoreType\", options.mainCreator);\n}\n\nfunction parseJsonTypeInfo(options, obj) {\n  const jsonTypeInfo = Reflect.getMetadata(\"jackson:JsonTypeInfo\", options.mainCreator);\n\n  if (jsonTypeInfo) {\n    let jsonTypeName;\n    let jsonTypeInfoProperty;\n    let newObj = obj;\n\n    switch (jsonTypeInfo.include) {\n      case 0:\n        jsonTypeInfoProperty = obj[jsonTypeInfo.property];\n        break;\n\n      case 1:\n        jsonTypeInfoProperty = Object.keys(obj)[0];\n        newObj = obj[jsonTypeInfoProperty];\n        break;\n\n      case 2:\n        jsonTypeInfoProperty = obj[0];\n        newObj = obj[1];\n        break;\n    }\n\n    const jsonSubTypes = Reflect.getMetadata(\"jackson:JsonSubTypes\", options.mainCreator);\n    if (jsonSubTypes) for (const subType of jsonSubTypes) if (jsonTypeInfoProperty === subType.name) jsonTypeName = subType.value;\n\n    if (!jsonTypeName) {\n      jsonTypeName = Reflect.getMetadata(\"jackson:JsonTypeName\", options.mainCreator);\n\n      switch (jsonTypeInfo.use) {\n        case 0:\n          jsonTypeName = options.mainCreator.name;\n          break;\n      }\n    }\n\n    for (const creator of options.otherCreators) if (Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isSameConstructor\"])(jsonTypeName, creator)) return {\n      creator,\n      newObj\n    };\n  }\n}\n\nfunction parseHasJsonView(options, key) {\n  if (options.view) {\n    const jsonView = Reflect.getMetadata(\"jackson:JsonView\", options.mainCreator, key);\n\n    if (jsonView) {\n      return Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isSameConstructor\"])(jsonView, options.view) || Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"isExtensionOf\"])(jsonView, options.view);\n    }\n  }\n\n  return true;\n}\n\n//# sourceURL=webpack:///./src/jackson.js?");

/***/ }),

/***/ "./src/util.js":
/*!*********************!*\
  !*** ./src/util.js ***!
  \*********************/
/*! exports provided: isClass, makeDecorator, getArgumentNames, cloneClassInstance, isSameConstructor, isExtensionOf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isClass\", function() { return isClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"makeDecorator\", function() { return makeDecorator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getArgumentNames\", function() { return getArgumentNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cloneClassInstance\", function() { return cloneClassInstance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isSameConstructor\", function() { return isSameConstructor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isExtensionOf\", function() { return isExtensionOf; });\n/* harmony import */ var _babel_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/parser */ \"./node_modules/@babel/parser/lib/index.js\");\n/* harmony import */ var _babel_parser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_parser__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * https://stackoverflow.com/a/43197340/4637638\n */\n\nfunction isClass(obj) {\n  const isCtorClass = obj.constructor && obj.constructor.toString().substring(0, 5) === 'class';\n\n  if (obj.prototype === undefined) {\n    return isCtorClass;\n  }\n\n  const isPrototypeCtorClass = obj.prototype.constructor && obj.prototype.constructor.toString && obj.prototype.constructor.toString().substring(0, 5) === 'class';\n  return isCtorClass || isPrototypeCtorClass;\n}\nfunction makeDecorator(defaultOptions, optionsOrTarget, propertyKey, descriptor, decorator) {\n  if (typeof optionsOrTarget === \"function\" || propertyKey != null || descriptor != null) {\n    const target = optionsOrTarget;\n    return decorator(defaultOptions, target, propertyKey, descriptor);\n  } else {\n    let options = optionsOrTarget;\n    options = Object.assign(defaultOptions, options);\n    return function (target, propertyKey, descriptor) {\n      return decorator(options, target, propertyKey, descriptor);\n    };\n  }\n}\n/** \n * https://github.com/rphansen91/es-arguments/blob/master/src/arguments.js#L3\n*/\n\nfunction pluckPattern(pattern) {\n  return ['{', pattern.map(({\n    key\n  }) => key.name).join(', '), '}'].join(' ');\n}\n/** \n * https://github.com/rphansen91/es-arguments/blob/master/src/arguments.js#L9\n*/\n\n\nfunction pluckParamName(param) {\n  if (param.name) return param.name;\n  if (param.left) return pluckParamName(param.left);\n  if (param.properties) return pluckPattern(param.properties);\n  if (param.type === 'RestElement') return '...' + pluckParamName(param.argument);\n  return;\n}\n\nfunction getArgumentNames(method, useFlow = false) {\n  let code = method.toString().trim();\n  if (code.startsWith(\"class extends\")) code = \"class JacksonClass \" + code.substring(6);else if (!code.startsWith(\"class \") && !code.startsWith(\"function \")) code = \"function \" + code;\n  const ast = Object(_babel_parser__WEBPACK_IMPORTED_MODULE_0__[\"parse\"])(code, {\n    plugins: [\"jsx\", !useFlow ? \"typescript\" : \"flow\"].concat(useFlow ? [\"flowComments\"] : [])\n  });\n  let {\n    body\n  } = ast.program;\n\n  if (code.startsWith(\"class \")) {\n    body = body[0].body.body; // find constructor\n\n    for (let propertyOrMethod of body) {\n      if (propertyOrMethod.kind === \"constructor\") {\n        body = [propertyOrMethod];\n        break;\n      }\n    }\n  }\n\n  return body.reduce((args, exp) => {\n    if (exp.params) return args.concat(exp.params);\n    if (exp.expression.params) return args.concat(exp.expression.params);\n    return args;\n  }, []).map(pluckParamName);\n}\nfunction cloneClassInstance(instance) {\n  return Object.assign(Object.create(Object.getPrototypeOf(instance)), instance);\n}\nfunction isSameConstructor(ctorOrCtorName, ctor2) {\n  return typeof ctorOrCtorName === \"string\" && ctorOrCtorName === ctor2.name || ctorOrCtorName === ctor2;\n}\nfunction isExtensionOf(ctor, ctorExtensionOf) {\n  if (typeof ctor === \"string\") {\n    let parent = Object.getPrototypeOf(ctorExtensionOf);\n\n    while (parent.name) {\n      if (parent.name == ctor) return true;\n      parent = Object.getPrototypeOf(parent);\n    }\n  } else return ctor !== ctorExtensionOf && ctorExtensionOf.prototype instanceof ctor;\n\n  return false;\n}\n\n//# sourceURL=webpack:///./src/util.js?");

/***/ })

/******/ });